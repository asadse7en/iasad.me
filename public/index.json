[{"content":"\rBox Info\rName: ReadMyCert\rDifficulty: Easy\rPoints: 100\rLink: PicoCTF\rCategory: Cryptography\rDescription How about we take you on an adventure on exploring certificate signing requests\nTake a look at this CSR file here\nHint💡 Download the certificate signing request and try to read it.\nDumping the contents of the readmycert.cer file reveals:\n-----BEGIN CERTIFICATE REQUEST----- MIICpzCCAY8CAQAwPDEmMCQGA1UEAwwdcGljb0NURntyZWFkX215Y2VydF9hNzE2 M2JlOH0xEjAQBgNVBCkMCWN0ZlBsYXllcjCCASIwDQYJKoZIhvcNAQEBBQADggEP ADCCAQoCggEBAL6KBBqiFmUHDwT3NtVw+Ozveo9uAZ+c47X5n+MEsWPowsNIz9fG kpLf9rgu9kR4ZR1H5IEddOGEsTA9qRUc1mwBuZeld5o9ltDU+6YzCKANDnwS61sB w4FV54LTy33T1+1bc11o++3LM34pFCGWI3lwoj8GWDRJdxvvp5Iwh5kz4ki6Mwp/ HAKyyG9i9KMOXAm/Zw0FkL1UZppHa00cbdCieen7lZgeVpFlIs3uo8tL6fGmpYww Ard6ZFzL1zCwgZukSHsul20gi9Ba4Uz3R4f6zA/PL0S7haAif96yyi/REREKUZGt 76Gt8zv2xVAqhZYYpFqOmv1ycRmZSyF8GWkCAwEAAaAmMCQGCSqGSIb3DQEJDjEX MBUwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAI4mtS0h 2HQseRJfnySGJdsnquMyLSV1EdvAfb2qTosXuQH0vunk5NbnR9yjXKej0I2Uu6DW f9UehV+QsgW1tmZKpjGXj602nESDBVwiyNw84AXaW74+vH1lVKu9YFf08GI40Fee jYYjQLz6DatXL0Qsuyjjo/MF1W1z/N7ErLvox7tj+dIOfEs14LYx61JrwwcAw8Ak 1lo4gwusg/+aEpAhDcw62Bjh2iGfwydHV7vh04vWBzPoSz5xyrNG+w8kALKKRUTh Z9wKzilfeMGpobC7at6ys5cMdrC3ePVxn0XWTQEWfjQwtr+UtOoOWlP8eJEstWQU qbdZveR4nsgbnkU= -----END CERTIFICATE REQUEST----- Looks base64 encoded, running through CyberChef the flag is found in amongst the decoded output :\nFlag: picoCTF{read_mycert_a7163be8}\nConclusion The given text is a simple base64 encoding. We can use tools like base64 decoder and CyberChef to decode it. In Linux, you can pipe the base64 encoded text to base64 -d to decode it.\ni.e. to decode QXNhZCBVbGxhaA== use echo \u0026quot;QXNhZCBVbGxhaA==\u0026quot; | base64 -d\n","permalink":"https://iasad.me/write-ups/picoctf/readmycert/","summary":"certificate signing request with base64 encoding","title":"ReadMyCert - PicoCTF"},{"content":"\rBox Info\rName: Rotation\rDifficulty: Easy\rPoints: 100\rLink: PicoCTF\rCategory: Cryptography\rDescription You will find the flag after decrypting this file Download the encrypted flag here\nHint💡 Sometimes rotation is right\nGiven the name of this challenge, a rotation-based substitution cipher is suspected.\nThe contents of the encrypted flag file are:\nxqkwKBN{z0bib1wv_l3kzgxb3l_25l7k61j} The encrypted text follows the flag structure picoCTF{}\nWe can use CyberChef to find the plaintext. By applying ROT13 operation, and adjesting the amount to 18 we get the Flag\nFlag: picoCTF{r0tat1on_d3crypt3d_25d7c61b}\nConclusion while rotation ciphers have been used historically and can be a fun puzzle to solve, they are not considered very secure in modern cryptography. As a result, they are not commonly used in practical applications where data security is critical. CTFs use ROT ciphers so that participant understand the limitations of these ciphers and to explore more advanced encryption techniques for better data protection.\n","permalink":"https://iasad.me/write-ups/picoctf/rotation/","summary":"A very simple rotation-based substitution cipher - (ROT-18)","title":"Rotation - PicoCTF"},{"content":"\rBox Info\rName: File Types\rDifficulty: Easy\rPoints: 100\rLink: PicoCTF\rCategory: Forensics\rDescription This file was found among some files marked confidential but my pdf reader cannot read it, maybe yours can.\nYou can download the file from here\nHint💡\nRemember that some file types can contain and nest other files\nFirst, download the file\ncurl https://artifacts.picoctf.net/c/80/Flag.pdf After downloading the file, the first step is to check its type by using the file command in Linux: file Flag.pdf. In this specific case, it turns out that the file is not a PDF but a shell archive.\nlet\u0026rsquo;s change the extension from .pdf to .sh and give it executable permissions and execute it\n┌──(kali㉿iasad)-[~/CTFs/picoCTF] └─$ mv flag.pdf flag.sh ┌──(kali㉿iasad)-[~/CTFs/picoCTF] └─$ chmod +x flag.sh ┌──(kali㉿iasad)-[~/CTFs/picoCTF] └─$ ./flag.sh If you receive an error message saying uudecode: command not found, you need to install uudecode. This utility is part of sharutils, and can be installed with the command sudo apt install sharutils.\nAfter installation, run ./flag.sh to extract a flag file. Check the file type by running file flag. It is a current ar archive.\nLet\u0026rsquo;s extract the flag from the nested Archives. ar x flag - to extract ar archive use file flag - cpio archive mv flag flag.cpio - change file extension cpio —file flag.cpio —extract file flag - bzip2 compressed data mv flag flag.bzip2 - change file extension bzip2 flag file flag.out - gzip compressed data mv flag.out flag.gz - change file extension gunzip flag.gz file flag - lzip compressed data lzip -d flag file flag.out - LZ4 compressed data mv flag.out flag.lz4 - change file extension lz4 -d flag.lz4 file flag - LZMA compressed data mv flag flag.lzma - change file extension unlzma -d flag.lzma file flag - lzop compressed data mv flag flag.lzop - change file extension lzop -x flag.lzop file flag - lzip compressed data lzip -d flag file flag - XZ compressed data mv flag.out flag.xz - change file extension unxz flag.xz file flag - ASCII Data Finally we got an ASCII text file containing the following hexadecimal string:\n7069636f4354467b66316c656e406d335f6d406e3170756c407431306e5f 6630725f3062326375723137795f39353063346665657d0a This is a hexadecimal representation of text. With a quick search on Google, you can find many tools that can convert it to text and ultimately reveal the flag. in Linux use this commandcat flag | xxd -r -p\nFlag: picoCTF{f1len@m3_m@n1pul@t10n_f0r_0b2cur17y_950c4fee}\nConclusion The challenge \u0026ldquo;File Type\u0026rdquo; on PicoCTF involves analyzing a file that is not what it seems to be. The file appears to be a PDF, but it turns out to be a shell archive. The solution involves extracting the file using a series of commands, which reveal that the file is actually a compressed ASCII text file containing a hexadecimal representation of text. The final output is a flag that can be obtained by converting the hexadecimal string to text.\n","permalink":"https://iasad.me/write-ups/picoctf/file-type/","summary":"forensics challenge with nested compressions and file types","title":"File Types - PicoCTF"},{"content":"\rBox Info\rName: Crack the Hash Level 2\rOS: -\rDifficulty: Medium\rPoints: 600\rLink: TryHackMe\rDescription: Advanced hash cracking challenges and wordlist generation\rIf you want to skip directly to the hash cracking section, click here 🔗\nHash identification When you come across a hash, the first step is usually to figure out what type of hash it is. There are many types of hashes, with some well-known ones like MD5 and SHA1,\nTo identify hashes, the challenge recommended installing Haiti, but I needed to install the gem package first. I did this by running the command\nsudo apt-get install rubygems Once I had done this, I was able to install Haiti by running the command\nsudo gem install haiti-hash Task 1 - Identify Hash Type 741ebf5166b9ece4cca88a3868c44871e8370707cf19af3ceaa4a6fba006f224ae03f39153492853 Launch Haiti on hash\nTask 2 - What is Keccak-256 Hashcat and John the Ripper code? The blue section indicates the mode for Hashcat, while the pink section represents the hash code for John.\nWordlists To crack passwords, you\u0026rsquo;ll need wordlists, which are collections of commonly used passwords or other strings. Two popular sources for wordlists are SecLists and Rawsec\u0026rsquo;s CyberSecurity Inventory.\nSecLists is a comprehensive collection of various types of wordlists used in security assessments, such as passwords, usernames, and URLs. wordlistctl is a script that can fetch, install, update, and search more than 6300 wordlist archives from websites that offer them. Rawsec\u0026rsquo;s CyberSecurity Inventory is a resource inventory for cybersecurity tools, including wordlist generator tools, which can help in the creation of custom wordlists. To use wordlistctl on Kali Linux, clone from Github\rpython3 wordlistctl/wordlistctl.py -h\nsearch for rockyou on your local archive with wordlistctl search -l rockyou\nQ: what is the path where is stored the wordlist?\n/usr/share/wordlists/passwords/rockyou.txt Q: What is the name of the first wordlist in the usernames category?\nCommonAdminBase64 Cracking tools, modes \u0026amp; rules To crack passwords, you\u0026rsquo;ll need a tool like • Hashcat or John the Ripper. There are three ways to crack passwords:\nWordlist mode: This method uses a list of common passwords, usernames, or other words to try and guess the password. Incremental mode: This method tries every possible combination of characters until it finds the password. This can take a long time, especially for long passwords. Rule mode: This method uses a wordlist but adds some patterns or modifies the words to try and guess the password. There are two ways to perform a rule-based brute force:\nGenerate a custom wordlist and use it with the classic wordlist mode. Use a common wordlist and apply custom mangling rules to it. This is more efficient as you don\u0026rsquo;t have to store and generate multiple wordlists. John the Ripper has various built-in rules to apply to wordlists, but you can also create your own. You can check the John the Ripper Wordlist rules syntax for guidance on creating custom rules.\nJohn the Ripper already include various mangling rules but you can create your owns and apply them the wordlist when cracking:\n$ john hash.txt --wordlist=/usr/share/wordlists/passwords/rockyou.txt rules=norajCommon02 ﻿You can consult John the Ripper Wordlist rules syntax for creating your own rules.\nI\u0026rsquo;ll give you the main ideas of mutation rules, of course several can be combined together.\nBorder mutation - commonly used combinations of digits and special symbols can be added at the end or at the beginning, or both Freak mutation - letters are replaced with similarly looking special symbols Case mutation - the program checks all variations of uppercase/lowercase letters for any character Order mutation - character order is reversed Repetition mutation - the same group of characters are repeated several times Vowels mutation - vowels are omitted or capitalized Strip mutation - one or several characters are removed Swap mutation - some characters are swapped and change places Duplicate mutation - some characters are duplicated Delimiter mutation - delimiters are added between characters Depending of your distribution, the John configuration may be located at /etc/john/john.conf and/or /usr/share/john/john.confTo locate the JtR install directory run locate john.confthen create john-local.confin the same directory (in my case/usr/share/john/john-local.conf and create our rules in here.\nLet’s use the top 10 000 most used password list from SecLists (/usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt) and generate a simple border mutation by appending all 2 digits combinations at the end of each password.Let\u0026rsquo;s edit /usr/share/john/john-local.conf and add a new rule:,\nlet\u0026rsquo;s crack the SHA1 hash 2d5c517a4f7a14dcb38329d228a7d18a3b78ce83 Now let’s crack the SHA1 hash we just have to write the hash in a text file and to specify the hash type, the wordlist and our rule name.\njohn hash.txt --format=raw-sha1 --wordlist=/usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt --rules=THM01 Custom wordlist generation Generating a custom wordlist may be a better option in some cases, even though using mangling rules can save storage space and time. Some reasons to generate a custom wordlist include:\nYou plan to use the wordlist multiple times, and generating one upfront will save computation power compared to using a mangling rule each time. You want to use the same wordlist across different cracking tools. The tool you want to use supports wordlists but not mangling rules. You find the syntax for creating custom rules in John too complex. Mentalist Let\u0026rsquo;s say we know the password we want to crack is about dogs. We can download a list of dog races wordlistctl fetch -l dogs -d (/usr/share/wordlists/misc/dogs.txt). Then we can use Mentalist to generate some mutations.\nQuestion 1 Crack the following md5 hash with the wordlist generated in the previous steps.\ned91365105bba79fdab20c376d83d752 CeWL Now let’s use CeWL to generate a wordlist from a website. It could be useful to retrieve a lot of words related to the password’s topic.\nFor example to download all words from example.org with a depth of 2, run:cewl -d 2 -w $(pwd)/example.txt https://example.orgThe depth is the number of link level the spider will follow.\nQuestion 2 What is the last word of the list?\nTTPassGen pip install ttpassgen With TTPassGen we can craft wordlists from scratch. Create a first wordlist containing all 4 digits PIN code value.\nttpassgen --rule \u0026#39;[?d]{4:4:*}\u0026#39; pin.txt Generate a list of all lowercase chars combinations of length 1 to 3.\nttpassgen --rule \u0026#39;[?l]{1:3:*}\u0026#39; abc.txt Then we can create a new wordlist that is a combination of several wordlists. Eg. combine the PIN wordlist and the letter wordlist separated by a dash.\nttpassgen --dictlist \u0026#39;pin.txt,abc.txt\u0026#39; --rule \u0026#39;$0[-]{1}$1\u0026#39; combination.txt Be warned combining wordlists quickly generated huge files, here combination.txt is 1.64 GB.\n$ wc pin.txt\r10000 10000 50000 pin.txt\r$ wc abc.txt\r18278 18278 72384 abc.txt\r$ wc combination.txt\r182780000 182780000 1637740000 combination.txt Question 3 Crack this md5 hash with combination.txt.\ne5b47b7e8df2597077e703c76ee86aee\nIt\u0026rsquo;s time to crack hashes - the actual challange You will have to crack several hashes. For each hash you will be given a short scenario that will help you to create a mangling rules, build a wordlist or finding some specialized data you\u0026rsquo;ll need to crack the hash.\nTask 1 Advice n°1 = b16f211a8ad7f97778e5006c7cecdf31 Question Hint💡\nEnglish male name, MD5, Border mutation, custom rule\necho \u0026#39;b16f211a8ad7f97778e5006c7cecdf31\u0026#39; \u0026gt; hash1.txt As the hint suggests the password is english male name with border mutation and custom rule and we also know that it is md5 hash.\nFirst, we need to find wordlist of male names using wordlistctl python3 [wordlistctl.py](http://wordlistctl.py/) search male\ndownload any wordlist I will use top_1000_usa_femalenames_english with the following commad\npython3 wordlistctl.py fetch -l top_1000_usa_femalenames_english -d Secondly, create a custom rule in john-local.config\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cat /usr/share/john/john-local.conf [List.Rules:task01] c$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+] c^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+] The border mutation rule adds a combination of digits and special symbols at the end or beginning, or both, and is commonly used.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash1.txt --wordlist=malenames-usa-top1000.txt --rules=task01 Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status 0g 0:00:00:06 0.41% (ETA: 19:20:20) 0g/s 7024Kp/s 7024Kc/s 7024KC/s Lane03+4+..Curtis03+50 Za**********4* (?) 1g 0:00:00:33 DONE (2021-04-23 18:56) 0.03018g/s 7760Kp/s 7760Kc/s 7760KC/s Alden1234*..Ivan1234( Use the \u0026#34;--show --format=Raw-MD5\u0026#34; options to display all of the cracked passwords reliably Session completed Task 2 Advice n°2 = 7463fcb720de92803d179e7f83070f97 Question Hint💡\nEnglish female name, MD5, Border mutation, custom rule\necho \u0026#39;7463fcb720de92803d179e7f83070f97\u0026#39; \u0026gt; hash2.txt First, download common female namelist using wordlistctl\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ wordlistctl fetch -l femalenames-usa-top1000 Then create a rule in john-local.config according to the advice no 2 which suggests to use border mutation:\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cat /usr/share/john/john-local.conf [List.Rules:task02] c$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+]$[0-9!@#$%^\u0026amp;*()_+] c^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+]^[0-9!@#$%^\u0026amp;*()_+] Now run john on it\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash2.txt --wordlist=femalenames-usa-top1000.txt --rules=task02 ┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash2.txt --show ?:*********5! Task 3 Advice n°2 = 7463fcb720de92803d179e7f83070f97 Question Hint💡\nTown name of Mexico, MD5, Freak mutation, mentalist tool\necho \u0026#39;7463fcb720de92803d179e7f83070f97\u0026#39; \u0026gt; hash3.txt First, download Mexico town namelist using wordlistctl\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ wordlistctl fetch -l towns_mx -d Clean the wordlist. Remove spaces and change everything to lowercase.\ncat cities.txt | sed -r \u0026#39;s/\\s+//g\u0026#39; | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \u0026gt; cities_final.txt the advice suggests to use freak mutation. There is a default rule in john, “l33t”, which does the freak mutation by default.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash3.txt --wordlist=cities_final.txt --rules=l33t ┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash2.txt --show Tl@x******ng0 Task 4 Advice n°4 a3a321e1c246c773177363200a6c0466a5030afc Question Hint💡\nOwn name, SHA1, Case mutation; existing rule\necho \u0026#39;a3a321e1c246c773177363200a6c0466a5030afc\u0026#39; \u0026gt; hash4.txt First, we need to find the wordlist Since, wordlist consists of his name. We can add his first name, last name, combined name into the wordlist.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cat names.txt david gauttapan davidguattapan The \u0026ldquo;TN\u0026rdquo; rule in john is a default rule that toggles the case of each character in a password candidate.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-SHA1 hash4.txt --wordlist=names.txt --rules=NT Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status Dav******An (?) 1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn..DavIDgUEtTAPAn Use the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably Session completed Task 5 Advice n°5 d5e085772469d544a447bc8250890949 Question Hint💡\nLyrics, MD5, Order mutation, lyricpass\necho \u0026#39;d5e085772469d544a447bc8250890949\u0026#39; \u0026gt; hash5.txt First, we need to find the wordlist We can use lyricpass to download the lyrics of all the songs by Adele. Using the command:\nlyricpass.py -a \u0026quot;Adele\u0026quot;\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ lyricpass.py -a Adele [+] Looking up artist Adele [+] Found 345 songs for artists Adele [+] All done! 345/345... Raw lyrics: raw-lyrics-2021-04-23-20.30.50 Passphrases: wordlist-2021-04-23-20.30.50 The advice suggests \u0026ldquo;Order mutation - character order is reversed is used for that we have a default rule in john “r” we can use that\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-MD5 hash5.txt --wordlist=raw-lyrics-2021-04-23-20.30.50 --rules=r Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status uoy ot m**s ot em rof ***d oot ro **** oot si ***ir oN (?) 1g 0:00:00:00 DONE (2021-04-23 20:40) 16.66g/s 6400p/s 6400c/s 6400C/s tnew yrots eht woh si sihT..egdirb eht rednu retaw tnia evol ruo taht yaS Use the \u0026#34;--show --format=Raw-MD5\u0026#34; options to display all of the cracked passwords reliably Session completed Task 6 Advice n°6 377081d69d23759c5946a95d1b757adc Question Hint💡\nPhone number, MD5, No mutation, pnwgen\necho \u0026#39;a3a321e1c246c773177363200a6c0466a5030afc\u0026#39; \u0026gt; hash6.txt Clues from the given advice: ******Phone number from Sint Maarten. No Mutation.\nFirst, we need to find the wordlist. for this we have to know what prefix Sint Maarten uses. here is a full list of country codes and prefixes on wikipedia\nSint Maarten: +1 and 721 prefix for mobile phone number\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ python pnwgen.py +1721 \u0026#39;\u0026#39; 7 this will create a wordlist of all possible numbers in the given prefix and length is 7\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ $ john hash6.txt --format=raw-md5 --wordlist=/tmp/pnwgen/wordlist.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\r+1721****375 (?)\r1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn..DavIDgUEtTAPAn\rUse the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably\rSession completed Task 7 Advice n°7 ba6e8f9cd4140ac8b8d2bf96c9acd2fb58c0827d556b78e331d1113fcbfe425ca9299fe917f6015978f7e1644382d1ea45fd581aed6298acde2fa01e7d83cdbd Question Hint💡\nRockyou, SHA3-512, No mutation\necho \u0026#39;ba6e8f9cd4140ac8b8d2bf96c9acd2fb58c0827d556b78e331d1113fcbfe425ca9299fe917f6015978f7e1644382d1ea45fd581aed6298acde2fa01e7d83cdbd\u0026#39; \u0026gt; hash7.txt Clues from the given advice: “ Last Competition Project of NIST” .Searching from the internet, I got to know that the hash is Raw-SHA3.\nSo we have to use sha3 hash\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ $ john hash.txt --format=raw-sha3 --wordlist=rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\r!@#******!@# (?)\r1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn.\rUse the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords\rSession completed Task 8 Advice n°8 9f7376709d3fe09b389a27876834a13c6f275ed9a806d4c8df78f0ce1aad8fb343316133e810096e0999eaf1d2bca37c336e1b7726b213e001333d636e896617 Question Hint💡\nWeb scrapping, blake2, Repetition, CeWL\necho \u0026#39;ba6e8f9cd4140ac8b8d2bf96c9acd2fb58c0827d556b78e331d1113fcbfe425ca9299fe917f6015978f7e1644382d1ea45fd581aed6298acde2fa01e7d83cdbd\u0026#39; \u0026gt; hash8.txt Clues from the given advice: All the words are form the webpage . Repetition of same word 2 or 3 or 5 or more than 5 times. Finalist of SHA-3 project. A simple internet search gives us the hash type.\nUse CeWL to scrape the words from the website.\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ cewl -d 2 -w hash8_scrapped.txt http://\u0026lt;MACHINE_IP\u0026gt;/rtfm.re/en/sponsors/index.html Generate the wordlist with 1,2,3,4 and 5 repetition of the words using python script.\nfile1 = open(\u0026#39;hash8_scrapped.txt\u0026#39;, \u0026#39;r\u0026#39;) file2 = open(\u0026#39;hash8_final.txt\u0026#39;, \u0026#39;w\u0026#39;) while True: l = file1.readline() if not l: break l = l.strip() for i in range(1, 6): file2.write(l*i+\u0026#39;\\n\u0026#39;) file1.close() file2.close() Use john with Raw-Blake2\n┌──(kali㉿iasad)-[~/CTFs/tryhackme] └─$ john --format=Raw-Blake2 hash8 -wordlist=hash8_final.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x]) Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hacki************nghacking (?) 1g 0:00:00:00 DONE (2021-04-23 20:27) 8.333g/s 38333p/s 38333c/s 38333C/s DavIDgUEttapAn..DavIDgUEtTAPAn Use the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably Session completed Task 9 Advice n°9 $6$kI6VJ0a31.SNRsLR$Wk30X8w8iEC2FpasTo0Z5U7wke0TpfbDtSwayrNebqKjYWC4gjKoNEJxO/DkP.YFTLVFirQ5PEh4glQIHuKfA/ Question Hint💡\nRockyou, SHA512-crypt, No mutation\necho \u0026#39;$6$kI6VJ0a31.SNRsLR$Wk30X8w8iEC2FpasTo0Z5U7wke0TpfbDtSwayrNebqKjYWC4gjKoNEJxO/DkP.YFTLVFirQ5PEh4glQIHuKfA/\u0026#39; \u0026gt; hash9.txt using sha512crypt format\n┌──(kali㉿iasad)-[~/CTFs/tryhackme]\r└─$ $ john --format=sha512crypt hash9.txt --wordlist=/rockyou.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])\rCost 1 (iteration count) is 5000 for all loaded hashes\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rkakashi1 (?)\r1g 0:00:00:17 DONE (2021-04-23 16:34) 0.05701g/s 1590p/s 1590c/s 1590C/s mothers..citlali\rUse the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably\rSession completed Conclusion In summary, this room has a lot of valuable content and teachings about the rules in John. It may take some time to fully understand everything, but it is worth it. If you have any questions, don\u0026rsquo;t hesitate to ask me.\n","permalink":"https://iasad.me/write-ups/tryhackme/crack-the-hash-level-2/","summary":"Advanced hash cracking challenges and wordlist generation","title":"Crack the Hash Level 2 - TryHackMe"},{"content":"\rBox Info\rName: Crack the Hash\rOS: -\rDifficulty: Easy\rPoints: 320\rLink: TryHackMe\rDescription: analyzing and cracking hashes using hashcat and crackstation\rIntroduction We will be tackling a hacking challenge today on tryhackme, where the community have created multiple challenges. you can participate in these challenges freely.\nSpecifically, I will be providing a walkthrough on the crack the hash challenge. This challenge comprises nine tasks, which I will explain in detail, one by one.\nTools used for hash analyzing and cracking hashes hash-identifier hash-analyzer hash-identification hashcat crackstation hashes Task 1 - md5 hash: 48bb6e862e54f2a795ffc4e541caed4d\nFirst we need to identify the hash type using tools like hash-identifier or online hash analyzer sites like hash-analyzer\nso it is an MD5 hash now to crack it we can use tools like hashcat or online platform like crackstation\nAnswer: easy\nTask 2 - sha1 hash: CBFDAC6008F9CAB4083784CBD1874F76618D2A97\nsimilarly we can find this one also on crackstation. this time it is a sha1 hash\nAnswer: password123\nTask 3 - sha256 hash: 1C8BFE8F801D79745C4631D09FFF36C82AA37FC4CCE4FC946683D7B336B63032\nagain we will use crackstation. this time it is a sha256 hash\nAnswer: letmein\nTask 4 - bcrypt hash: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom\nAnalyzing hash type using hash-analyzer we can see it is a bcrypt hash\nThis hash is difficult to crack using online tools, which is why we can use tools such as hashcat\nHashcat Hashcat is a password cracking tool that uses brute-force, dictionary, and rule-based attacks to recover passwords from various types of hashed data.\nto install hashcat → sudo apt install hashcat. to crack hashes using hashcat we provide it the hashhashed.txt a wordlist i.e. rockyou.txt and -m switch for mode (mode specify hash type)for bcrypt mode is -m 3200\nAsad@Kali:~/tools/hashcat$ ./hashcat64.bin -m 3200 hash.txt ../rockyou.txt Answer: bleh\nTask 5 - md4 Hash: 279412f945939ba78ce0758d3fd83daa\nagain the same process identify the hash using hash-analyzer and crack it using hashcat\n./hashcat64.bin -m 900 hash.txt rockyou.txt\nthis one was also present on crackstation\nAnswer: Ethernity22\nTask 6 - sha256 hash: F09EDCB1FCEFC6DFB23DC3505A882655FF77375ED8AA2D1C13F640FCCC2D0C85\nsame drill - identify hash type → hash-analyzer\nHashcat asad@kali:~/tools/hashcat$ ./hashcat64.bin -m 1400 hash.txt ../rockyou.txt hashcat (v5.1.0) starting... * Device #1: WARNING! Kernel exec timeout is not disabled. This may cause \u0026#34;CL_OUT_OF_RESOURCES\u0026#34; or related errors. To disable the timeout, see: https://hashcat.net/q/timeoutpatch nvmlDeviceGetFanSpeed(): Not Supported OpenCL Platform #1: NVIDIA Corporation ====================================== * Device #1: GeForce MX130, 501/2004 MB allocatable, 3MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Applicable optimizers: * Zero-Byte * Early-Skip * Not-Salted * Not-Iterated * Single-Hash * Single-Salt * Raw-Hash Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 ATTENTION! Pure (unoptimized) OpenCL kernels selected. This enables cracking passwords and salts \u0026gt; length 32 but for the price of drastically reduced performance. If you want to switch to optimized OpenCL kernels, append -O to your commandline. Watchdog: Temperature abort trigger set to 90c Dictionary cache hit: * Filename..: ../rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f640fccc2d0c85:paule Session..........: hashcat Status...........: Cracked Hash.Type........: SHA2-256 Hash.Target......: f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f...2d0c85 Time.Started.....: Thu Sep 5 16:44:44 2019 (1 sec) Time.Estimated...: Thu Sep 5 16:44:45 2019 (0 secs) Guess.Base.......: File (../rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 12297.6 kH/s (3.26ms) @ Accel:1024 Loops:1 Thr:64 Vec:1 Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts Progress.........: 196608/14344385 (1.37%) Rejected.........: 0/196608 (0.00%) Restore.Point....: 0/14344385 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates.#1....: 123456 -\u0026gt; piggy9 Hardware.Mon.#1..: Temp: 60c Util: 0% Core:1189MHz Mem:2505MHz Bus:4 Started: Thu Sep 5 16:44:42 2019 Stopped: Thu Sep 5 16:44:46 2019 f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f640fccc2d0c85:paule\nCrackstation Answer: pauke\ntask 7 - NTLM Hash: 1DFECA0C002AE40B8619ECF94819CC1B\nthis time it is a NTLM hash we can find it in crackstation\nAnswer: n63umy8lkf4i\ntask 8 - sha512 (salted) hash: $6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPMAXi4bJMl9be.cfi3/qxIf.hsGpS41BqMhSrHVXgMpdjS6xeKZAs02\nSalt: aReallyHardSalt\n$6$ is a sha512crypt\nit is a salted sha512 hash we can use hashcat to crack it\nasad@kali:~/tools$ ./hashcat/hashcat64.bin -m 1800 sha512.hash rockyou.txt --session sha512 hashcat (v5.1.0) starting... * Device #2: WARNING! Kernel exec timeout is not disabled. This may cause \u0026#34;CL_OUT_OF_RESOURCES\u0026#34; or related errors. To disable the timeout, see: https://hashcat.net/q/timeoutpatch nvmlDeviceGetFanSpeed(): Not Supported OpenCL Platform #1: Intel(R) Corporation ======================================== * Device #1: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, skipped. OpenCL Platform #2: NVIDIA Corporation ====================================== * Device #2: GeForce MX130, 501/2004 MB allocatable, 3MCU Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 1 Applicable optimizers: * Zero-Byte * Single-Hash * Single-Salt * Uses-64-Bit Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 ATTENTION! Pure (unoptimized) OpenCL kernels selected. This enables cracking passwords and salts \u0026gt; length 32 but for the price of drastically reduced performance. If you want to switch to optimized OpenCL kernels, append -O to your commandline. Watchdog: Temperature abort trigger set to 90c Dictionary cache hit: * Filename..: rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 [s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =\u0026gt; s Session..........: sha512 Status...........: Running Hash.Type........: sha512crypt $6$, SHA512 (Unix) Hash.Target......: $6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPM...ZAs02. Time.Started.....: Thu Sep 5 18:23:56 2019 (10 mins, 59 secs) Time.Estimated...: Thu Sep 5 19:27:46 2019 (52 mins, 51 secs) Guess.Base.......: File (rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#2.........: 3746 H/s (18.22ms) @ Accel:64 Loops:32 Thr:32 Vec:1 Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) Salts Progress.........: 2463744/14344385 (17.18%) Rejected.........: 0/2463744 (0.00%) Restore.Point....: 2463744/14344385 (17.18%) Restore.Sub.#2...: Salt:0 Amplifier:0-1 Iteration:2784-2816 Candidates.#2....: จคภจจ/ภ-ึจ -\u0026gt; zz336649 Hardware.Mon.#2..: Temp: 86c Util: 93% Core:1137MHz Mem:2505MHz Bus:4 Answer: waka99\ntask 9 - sha1(salted) hash: e5d8870e5bdd26602cab8dbe07a942c8669e56d6\nSalt: tryhackme\ncan be solved using hashcat using mode -m 110\nasad@kali:~/tools/hashcat$ ./hashcat64.bin -m 110 ../hash.sha1 ../rockyou.txt Answer: 481616481616\nConclusion In conclusion, hash cracking is a process of attempting to recover passwords from hashed data using specialized software tools like Hashcat. It is a useful technique for security professionals to assess the strength of passwords and improve overall security measures. If you found this write-up helpful, please consider sharing it with others who may also benefit from learning about hash cracking.\n","permalink":"https://iasad.me/write-ups/tryhackme/crack-the-hash.md/","summary":"analyzing and cracking hashes using hashcat and different online tools such as crackstation","title":"Crack the Hash - TryHackMe"},{"content":"Offensive Security just launched Kali Linux 2023.1, the latest version of their popular hacking tool. to celebrate their 10th anniversary. Exciting news for the cybersecurity world! They\u0026rsquo;ve even added a special edition called Kali Purple, specifically designed for those on the defense side of cybersecurity. This version is perfect for Blue and Purple team members who want to strengthen their security strategies.\nKali Linux is a go-to choice for ethical hackers and security experts who want to test network systems for vulnerabilities and conduct cybersecurity research. With Python updates and other new features, this latest release promises to make cybersecurity even more accessible and effective.\nKali Purple - The dawn of a new era. Kali is not only Offense, but starting to be defense Python Changes - Python 3.11 \u0026amp; PIP changes going forward 2023 Theme - Our once a year theme update! This time, what’s old is new again Desktop Updates - Xfce 4.18 \u0026amp; KDE Plasma 5.27 Default Kernel Settings - What makes the Kali kernel different New Tools - As always, various new tools added Kali Purple at Kali Linux 2023.1 Kali Purple is a new addition to Kali Linux 2023.1, designed for defensive security. It is specifically aimed at Blue and Purple team members, providing a comprehensive suite of tools for security professionals specializing in penetration testing and ethical hacking.\nWhat is in Kali Purple? Kali Purple is a reference architecture for the ultimate SOC In-A-Box It is perfect for learning, practicing SOC analysis and threat hunting, security control design and testing, Blue/Red/Purple teaming exercises, Kali spy vs. spy competitions, and protecting small to medium-sized environments It has over 100 defensive tools, including Arkime, CyberChef, Elastic Security, GVM, TheHive, Malcolm, Suricata, Zeek, and all the usual Kali tools It also has defensive tool documentation, a pre-generated image, and Kali Autopilot, an attack script builder/framework for automated attacks Kali Purple Hub is available for the community to share practice pcaps, Kali Autopilot scripts for blue teaming exercises, and community Wiki It has a defensive menu structure according to NIST CSF Identify Protect Detect Respond Recover Kali Purple Discord channels for community collaboration and fun It has a unique theme with installer, menu entries, and Xfce. Python Updates \u0026amp; Changes Debian is getting ready to release its next stable version, which means packages are being updated. Python is one such package, with Python 3.11 now available in Debian. This new version brings more informative error tracebacks and a significant speed increase. However, some older packages may not be supported with the upgrade.\nOne change that may catch people off guard is Python\u0026rsquo;s PIP behavior. Using PIP to install Python modules can clash with the operating system\u0026rsquo;s package management system, apt. To avoid this issue, users have three options:\nUse apt install python3-\u0026lt;package\u0026gt; (easy, simple \u0026amp; recommended) Use venv (slightly more complicated but still recommended) Use -break-system-packages (warning warning warning!) Kali Linux has applied a temporary patch to give users more time to adjust their procedures. However, this patch will be dropped with the release of Kali 2023.4 in the fourth quarter of this year. After that, PIP will refuse to install packages system-wide, and users will need to use one of the recommended options mentioned earlier. Kali Linux will remind users of this change with each version building up to the release. It is important to update scripts, pipelines, and documentation to the recommended ways to avoid issues with the new Python update.\nTheme Refresh Kali Linux 2023.1 has a brand new theme with updated wallpapers for the desktop, login, and boot displays. The Kali purple flavor is also included, and all desktops are now supported with new purple themes and icons. This year, in celebration of the 10-year anniversary, the theme is inspired by previous iconic Kali releases.\nthe backgrounds pays tribute to previous iconic Kali releases:\nBoot - Kali 1.0 Login/Lock - Kali 2.0 Wallpaper - Kali 1.1 Check out the latest Kali screenshot alongside the reference images below.\nBoot menu: Login/Lock:\nDesktop:\nAll new wallpapers New Tools in Kali It would not be a Kali release if there were not any new tools added! A quick run down of what has been added (to the network repositories):\nArkime CyberChef DefectDojo Dscan Kubernetes-Helm PACK2 Redeye Unicrypto There have also been numerous packages updates and new libraries as well. We also bump the Kali kernel to 6.1!\nDownload Kali Linux 2023.1 Kali Linux 2023.1 can be downloaded or you can update your existing installation to this version.\nMy Thoughts Kali Linux 2023.1 has made a great impression on me! What I really like is Kali Purple, a special edition designed for defensive security. Kali Purple comes with more than 100 tools that are perfect for practicing SOC analysis and threat hunting, as well as other things. This release also has some updates to Python and other elements that make it even better. The new theme is a nice touch and pays tribute to previous Kali versions that are well-known. Overall, I\u0026rsquo;m extremely happy with Kali Linux 2023.1\n","permalink":"https://iasad.me/blogs/kali-linux-2023-1/","summary":"A comprehensive overview of the latest version of Kali, covering its features, enhancements, and upgrades, to provide you with all the necessary knowledge about this version.","title":"Kali Linux 2023.1: The Ultimate Platform for Offensive and Defensive Security"}]